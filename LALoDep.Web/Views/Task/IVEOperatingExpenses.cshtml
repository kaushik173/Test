@model  LALoDep.Models.Task.IVEOperatingExpensesViewModel
@using LALoDep.Core.Custom.Extensions
@{
    ViewBag.Title = "Operating Expense";
    var rowCount = 1;
    var tabCount = 1;
}
<style>
    .tblForm td {
        padding: 3px;
    }

    .modal-header button {
        display: none;
    }
</style>
<style>
    .row {
        margin-right: -15px;
        margin-left: -15px;
    }

    table#activity-head {
        width: 100%;
        border: 0;
        font-size: 115%;
    }

    table th.activity-header {
        padding: 3px !important;
        text-align: center !important;
    }

    .activity-sheet > tbody > tr > td {
        padding: 0;
    }

        .activity-sheet > tbody > tr > td input[type=checkbox] {
            margin-left: 33px;
        }


    .table-responsive {
        width: 100%;
        margin-bottom: 15px;
        overflow-y: hidden;
        -ms-overflow-style: -ms-autohiding-scrollbar;
        border: 1px solid #ddd;
    }

        .table-responsive > .table > tbody > tr > td, .table-responsive > .table > tbody > tr > th, .table-responsive > .table > tfoot > tr > td, .table-responsive > .table > tfoot > tr > th, .table-responsive > .table > thead > tr > td, .table-responsive > .table > thead > tr > th {
            white-space: nowrap;
        }

    .form-inline .input-group {
        display: table;
        width: 100%;
    }

        .form-inline .input-group .input-group-addon {
            width: 30px !important;
        }

    .form-inline input {
        min-width: 80px;
    }
    .footer-row th {
        font-weight: bold !important;
        text-align: center;
        padding: 3px !important;
    }

    .footer-row td, .footer-row td input {
        font-weight: bold;
    }
</style>
<div class="widget margin-left-10 margin-right-10">
    <div class="widget-header bordered-bottom bordered-themeprimary col-xs-12 mobile-title">
        <span class="widget-caption">
            Operating Expense
        </span>
        <div class="widget-buttons">
            &nbsp;
        </div>
    </div>
    <div class="widget-body">
        @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "IVEOperatingExpenses-form", @class = "form-inline  center-block" }))
        {

            <div class="form-group">
                <label class="control-label" for="CourtSystem">  Court System:</label>
                @Html.TextBoxFor(m => m.CourtSystem, new { @class = "form-control input-sm  ", tabindex = 1, style = "width:100%;", disabled = "disabled" })
            </div>
            <div class="form-group">
                <label class="control-label" for="InvoicePeriod">   Invoice Period:</label>
                @Html.TextBoxFor(m => m.InvoicePeriod, new { @class = "form-control input-sm  ", tabindex = 4, style = "width:100%;", disabled = "disabled" })
            </div>
            <div class="form-group">
                <label class="control-label" for="InvoiceDate">  Invoice Date:</label>
                @Html.TextBoxFor(m => m.InvoiceDate, "{0:d}", new { @class = "form-control input-sm  ", tabindex = 3, style = "width:100%;", disabled = "disabled" })
            </div>
            <div class="form-group">
                <label class="control-label" for="InvoiceDate">   Invoice ID:</label>
                @Html.HiddenFor(m => m.InvoiceID)


                @Html.TextBoxFor(m => m.HeaderInvoiceID, new { @class = "form-control input-sm  ", tabindex = 4, style = "width:100%;", disabled = "disabled" })
            </div>




            <div class="clearfix"></div>
            <center><p style="font-size:12pt;padding:10px">Please provide supporting documentation: invoices and proof of payment.</p></center>
           
            <div class="form-group">
                <label class="control-label" for="NonTraining"> For non-training related expenses use:</label>  <span style="display: inline-block; padding-top: -6px; position: relative; top: 3px;">

                    <div class="input-group">
                        @Html.TextBox("NonTrainingExpenses", Model.NonTrainingExpenses, new { @class = "form-control input-sm     ", style = "width:80px;", disabled = "disabled" })

                        <span class="input-group-addon"><b>%</b></span>
                    </div>

                </span>



            </div>
            <div class="table-responsive">
                <table id="tblIVEOperatingExpenses" class="activity-sheet table">

                    <thead>
                        <tr>
                            <th class="activity-header" rowspan="2" style="width: 40px;">Row</th>
                            <th class="activity-header" rowspan="2" style="width: 80px;">  Date</th>
                            <th class="activity-header" rowspan="2" style="width: 70px;">Invoice <br />Reference Nbr <br />/Journal Entry  </th>
                            <th class="activity-header" rowspan="2" style="width: 60px;">Type <br /> of  Expense/<br />Description </th>
                            <th class="activity-header" rowspan="2" style="width: 70px;">Vendor Name </th>
                            <th class="activity-header" rowspan="2" style="width: 70px;"> Expense <br /> Amount</th>

                            <th class="activity-header" colspan="3">ENTER % RELATED TO DEPENDENCY </th>
                            <th class="activity-header" colspan="2">IDENTIFY FUNDING % </th>
                            <th class="activity-header" colspan="2">EXPENDITURES </th>

                            <th class="activity-header" colspan="3">FFDRP ELIGIBLE AMOUNT</th>
                            <th class="activity-header" rowspan="2" style="width: 200px;">Notes/Comments</th>
                            <th class="activity-header" rowspan="2" style="width: 100px;"></th>
                        </tr>
                        <tr>
                            <th class="activity-header" style="width: 40px;"> Non-<br />Training<br /> Related</th>
                            <th class="activity-header" style="width: 40px;"> Attorney  <br /> Training</th>
                            <th class="activity-header" style="width: 40px;"> Non-<br />Attorney<br /> Training</th>

                            <th class="activity-header" style="width: 40px;"> CAC<br /> Base</th>
                            <th class="activity-header" style="width: 40px;"> FFDRP<br /> Enhancement</th>
                            <th class="activity-header" style="width: 40px;"><small>CAC <br />Base<br /> Amount</small></th>
                            <th class="activity-header" style="width: 40px;"><small>FFDRP <br />Enhancement<br /> Amount</small></th>

                            <th class="activity-header" style="width: 40px;">Non-<br />Training<br /> Related</th>
                            <th class="activity-header" style="width: 40px;">Attorney  <br /> Training</th>
                            <th class="activity-header" style="width: 40px;">Non-<br />Attorney<br /> Training</th>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.TitleIVeOperatingExpensesList)
                        {

                            <tr class="trOperatingExpList  @(item.ReadOnly.ToInt()==1?"readonly":"") ">
                                <td>
                                    @Html.HiddenFor(o => item.TitleIVeOperatingExpenseID)
                                    @Html.HiddenFor(o => item.TitleIVeInvoiceID)
                                    @Html.HiddenFor(o => item.InsertedByUserID)
                                    @Html.HiddenFor(o => item.InsertedOnDateTime)
                                    @Html.HiddenFor(o => item.UpdatedByUserID)
                                    @Html.HiddenFor(o => item.UpdatedOnDateTime)
                                    @Html.HiddenFor(o => item.RecordStateID)

                                    <input class="form-control input-sm valid" id="item_rowCount" name="item.rowCount" style="width:100%;" type="text" value="@rowCount" autocomplete="off" aria-invalid="false" readonly="readonly">

                                </td>
                                <td>

                                    <div class="input-group">
                                        @Html.TextBoxFor(o => item.ExpenseDate, "{0:d}", new { @class = "form-control input-sm date-picker activity-day ignore-enterkey", tabindex = ++tabCount, style = "width:90px;" })
                                        <span class="input-group-addon datepicker-trigger">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                </td>
                                <td>
                                    @Html.TextBoxFor(o => item.InvoiceReferenceNbr, new { @class = "form-control input-sm  activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:100%;" })
                                </td>
                                <td>

                                    @Html.TextBoxFor(o => item.ExpenseDescription, new { @class = "form-control input-sm activity-day ignore-enterkey ", tabindex = ++tabCount, style = "width:100%;" })
                                </td>
                                <td>

                                    @Html.TextBoxFor(o => item.ExpenseProvider, new { @class = "form-control input-sm activity-day ignore-enterkey ", tabindex = ++tabCount, style = "width:100%;" })
                                </td>
                                <td>
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="fa fa-dollar"></i></span>
                                        @Html.TextBoxFor(o => item.ExpenseAmount, new { @class = "form-control input-sm  numeric-val ExpenseAmount text-right activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:80px;" })
                                    </div>
                                </td>
                                @*<td>
                                        <div class="input-group">
                                            @Html.CheckBoxFor(o => item.ForIndividual, new { @class = "form-control input-sm activity-day  ignore-enterkey", tabindex = ++tabCount })
                                        </div>
                                    </td>
                                    <td>
                                        <div class="input-group">
                                            @Html.TextBoxFor(o => item.PercentDependency, new { @class = "form-control input-sm  numeric-val PercentDependency activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:100%;" })
                                            <span class="input-group-addon"><b>%</b></span>
                                        </div>
                                    </td>*@
                                <td>
                                    <div class="input-group">

                                        @Html.TextBoxFor(o => item.EligibleNonTraining, new { @class = "form-control input-sm EligibleNonTraining number activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:80px;" })
                                        <span class="input-group-addon"><b>%</b></span>
                                    </div>
                                </td>
                                <td>
                                    <div class="input-group">

                                        @Html.TextBoxFor(o => item.EligibleAttorneyTraining, new { @class = "form-control input-sm EligibleAttorneyTraining number activity-day ignore-enterkey", tabindex = ++tabCount, style = "width:80px;" })
                                        <span class="input-group-addon"><b>%</b></span>
                                    </div>
                                </td>
                                <td>
                                    <div class="input-group">

                                        @Html.TextBoxFor(o => item.EligibleNonAttorneyTraining, new { @class = "form-control input-sm EligibleNonAttorneyTraining number activity-day ignore-enterkey", tabindex = ++tabCount, style = "width:80px;" })
                                        <span class="input-group-addon"><b>%</b></span>
                                    </div>
                                </td>
                                <td>
                                    <div class="input-group">
                                        @Html.TextBoxFor(o => item.PercentCACFunds, new { @class = "form-control input-sm number PercentCACFunds activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:100%;" })
                                        <span class="input-group-addon"><b>%</b></span>
                                    </div>
                                </td>
                                <td>
                                    <div class="input-group">
                                        @Html.TextBoxFor(o => item.PercentFFDRPFunds, new { @class = "form-control input-sm  number PercentFFDRPFunds activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:100%;" })
                                        <span class="input-group-addon"><b>%</b></span>
                                    </div>
                                </td>
                                <td>
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="fa fa-dollar"></i></span>
                                        @Html.TextBoxFor(o => item.CACFundAmount, new { @class = "form-control input-sm  CACFundAmount text-right activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:80px;", @readonly = "readonly" })
                                    </div>
                                </td>
                                <td>
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="fa fa-dollar"></i></span>
                                        @Html.TextBoxFor(o => item.FFDRPFundAmount, new { @class = "form-control input-sm FFDRPFundAmount text-right activity-day ignore-enterkey", tabindex = ++tabCount, style = "width:80px;", @readonly = "readonly" })
                                    </div>
                                </td>
                                @*<td>
                                        <div class="input-group">
                                            <span class="input-group-addon"><i class="fa fa-dollar"></i></span>
                                            @Html.TextBoxFor(o => item.EligibleCost, new { @class = "form-control input-sm  EligibleCost text-right activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:80px;", @readonly = "readonly" })
                                        </div>

                                    </td>*@
                                <td>
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="fa fa-dollar"></i></span>
                                        @Html.TextBoxFor(o => item.EligibleAmountNonTraining, new { @class = "form-control input-sm EligibleAmountNonTraining  text-right activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:80px;", @readonly = "readonly" })
                                    </div>

                                </td>
                                <td>
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="fa fa-dollar"></i></span>
                                        @Html.TextBoxFor(o => item.EligibleAmountAttorneyTraining, new { @class = "form-control input-sm  EligibleAmountAttorneyTraining text-right activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:80px;", @readonly = "readonly" })
                                    </div>

                                </td>
                                <td>
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="fa fa-dollar"></i></span>
                                        @Html.TextBoxFor(o => item.EligibleAmountNonAttorneyTraining, new { @class = "form-control input-sm  EligibleAmountNonAttorneyTraining text-right activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:80px;", @readonly = "readonly" })
                                    </div>

                                </td>
                                <td>

                                    @Html.TextBoxFor(o => item.Note, new { @class = "form-control input-sm  Note  activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:200px;" })


                                </td>
                                <td>
                                    @if (item.TitleIVeOperatingExpenseID.HasValue && item.TitleIVeOperatingExpenseID.Value > 0)
                                    {

                                        @*<a class="btn btn-info btn-xs" onclick="OpenPopup('/Task/IVEAttachments?docType=OpExpense&TitleIVeItemID=@(item.TitleIVeOperatingExpenseID.Value.ToEncrypt())&TitleIVeInvoiceID=@(item.TitleIVeInvoiceID.Value.ToEncrypt())', '@item.UploadButton')">@item.UploadButton</a>*@

                                        <a class="btn btn-danger btn-xs btndelete" data-id="@item.TitleIVeOperatingExpenseID.Value">Delete </a>

                                    }
                                    else
                                    {
                                        item.UploadButton = "Upload Doc";
                                        @*<a class="btn btn-info btn-xs btnUpload" data-rowno="@(rowCount-1)" data-url="/Task/IVEAttachments?docType=OpExpense&TitleIVeInvoiceID=@(item.TitleIVeInvoiceID.Value.ToEncrypt())&TitleIVeItemID=">@item.UploadButton</a>*@

                                    }
                                </td>
                            </tr>

                            rowCount++;
                        }
                        <tr class="footerrow">
                            <td colspan="5"></td>
                            <td class="text-right" id="SumTotalOperatingExpensesAmount" style="font-weight:700;">@(Model.TotalOperatingExpensesAmount >= 0 ? "$" + Model.TotalOperatingExpensesAmount : null)</td>

                            <td colspan="5" class="text-right"><strong>Operating Expense Totals:</strong></td>
                            <td class="text-right" id="SumCACFundAmount" style="font-weight:700;">@(Model.TotalCACFundAmount >= 0 ? "$" + Model.TotalCACFundAmount : null)</td>
                            <td class="text-right" id="SumFFDRPFundAmount" style="font-weight:700;">@(Model.TotalFFDRPFundAmount >= 0 ? "$" + Model.TotalFFDRPFundAmount : null)</td>
                            <td class="text-right" id="SumEligibleAmountNonTraining" style="font-weight:700;">@(Model.TotalEligibleAmountNonTraining >= 0 ? "$" + Model.TotalEligibleAmountNonTraining : null)</td>
                            <td class="text-right" id="SumEligibleAmountAttorneyTraining" style="font-weight:700;">@(Model.TotalEligibleAmountAttorneyTraining >= 0 ? "$" + Model.TotalEligibleAmountAttorneyTraining : null)</td>
                            <td class="text-right" id="SumEligibleAmountNonAttorneyTraining" style="font-weight:700;">@(Model.TotalEligibleAmountNonAttorneyTraining >= 0 ? "$" + Model.TotalEligibleAmountNonAttorneyTraining : null)</td>
                            <td></td>
                        </tr>
                        <tr class="footer-row">

                            <td colspan="5"></td>
                            <th>
                                Total Operating  <br />Expenses

                            </th>
                            <td colspan="5"></td>
                            <th>
                                CAC Base <br />Amount

                            </th>
                            <th>
                                FFDRP <br />Enhancement<br />  Amount

                            </th>
                            <th>
                                FFDRP Eligible <br />Amount <br />[Non-Training<br />
                                Related]

                            </th>
                            <th>
                                FFDRP Eligible<br /> Amount<br />
                                [Attorney<br />
                                Training]

                            </th>
                            <th>
                                FFDRP Eligible <br />Amount <br />[Non-Attorney<br />
                                Training]
                            </th>
                            <td></td>
                            <td></td>

                        </tr>
                    </tbody>

                </table><br /><br />
            </div>
        }

    </div>
    <br /><br />
    <div class="well bordered-top bordered-bottom bordered-themeprimary">
        <p style="line-height:21px;">
            Except for review by the California Department of Social Services or an audit of the program by state or federal officials, the information contained in these documents is confidential, privileged and only for the intended recipient. The information may not be used, published or redistributed without the prior written consent of the Judicial Council of California.
        </p>
    </div>
</div>
<table style="display:none" id="ExtraRows">


    @foreach (var item in Model.TitleIVeOperatingExpensesList.Where(o => o.TitleIVeOperatingExpenseID == 0).ToList())
    {

    <tr class="trOperatingExpList  @(item.ReadOnly.ToInt()==1?"readonly":"") ">
        <td>
            @Html.HiddenFor(o => item.TitleIVeOperatingExpenseID)
            @Html.HiddenFor(o => item.TitleIVeInvoiceID)
            @Html.HiddenFor(o => item.InsertedByUserID)
            @Html.HiddenFor(o => item.InsertedOnDateTime)
            @Html.HiddenFor(o => item.UpdatedByUserID)
            @Html.HiddenFor(o => item.UpdatedOnDateTime)
            @Html.HiddenFor(o => item.RecordStateID)

            <input class="form-control input-sm valid" id="item_rowCount" name="item.rowCount" style="width:100%;" type="text" value="@rowCount" autocomplete="off" aria-invalid="false" readonly="readonly">

        </td>
        <td>

            <div class="input-group">
                @Html.TextBoxFor(o => item.ExpenseDate, "{0:d}", new { @class = "form-control input-sm date-picker activity-day ignore-enterkey", tabindex = ++tabCount, style = "width:90px;" })
                <span class="input-group-addon datepicker-trigger">
                    <i class="fa fa-calendar"></i>
                </span>
            </div>
        </td>
        <td>
            @Html.TextBoxFor(o => item.InvoiceReferenceNbr, new { @class = "form-control input-sm  activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:100%;" })
        </td>
        <td>

            @Html.TextBoxFor(o => item.ExpenseDescription, new { @class = "form-control input-sm activity-day ignore-enterkey ", tabindex = ++tabCount, style = "width:100%;" })
        </td>
        <td>

            @Html.TextBoxFor(o => item.ExpenseProvider, new { @class = "form-control input-sm activity-day ignore-enterkey ", tabindex = ++tabCount, style = "width:100%;" })
        </td>
        <td>
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-dollar"></i></span>
                @Html.TextBoxFor(o => item.ExpenseAmount, new { @class = "form-control input-sm  numeric-val ExpenseAmount text-right activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:80px;" })
            </div>
        </td>
        @*<td>
            <div class="input-group">
                @Html.CheckBoxFor(o => item.ForIndividual, new { @class = "form-control input-sm activity-day  ignore-enterkey", tabindex = ++tabCount })
            </div>
        </td>
        <td>
            <div class="input-group">
                @Html.TextBoxFor(o => item.PercentDependency, new { @class = "form-control input-sm  numeric-val PercentDependency activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:100%;" })
                <span class="input-group-addon"><b>%</b></span>
            </div>
        </td>*@
        <td>
            <div class="input-group">

                @Html.TextBoxFor(o => item.EligibleNonTraining, new { @class = "form-control input-sm EligibleNonTraining number activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:80px;" })
                <span class="input-group-addon"><b>%</b></span>
            </div>
        </td>
        <td>
            <div class="input-group">

                @Html.TextBoxFor(o => item.EligibleAttorneyTraining, new { @class = "form-control input-sm EligibleAttorneyTraining number activity-day ignore-enterkey", tabindex = ++tabCount, style = "width:80px;" })
                <span class="input-group-addon"><b>%</b></span>
            </div>
        </td>
        <td>
            <div class="input-group">

                @Html.TextBoxFor(o => item.EligibleNonAttorneyTraining, new { @class = "form-control input-sm EligibleNonAttorneyTraining number activity-day ignore-enterkey", tabindex = ++tabCount, style = "width:80px;" })
                <span class="input-group-addon"><b>%</b></span>
            </div>
        </td>
        <td>
            <div class="input-group">
                @Html.TextBoxFor(o => item.PercentCACFunds, new { @class = "form-control input-sm number PercentCACFunds activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:100%;" })
                <span class="input-group-addon"><b>%</b></span>
            </div>
        </td>
        <td>
            <div class="input-group">
                @Html.TextBoxFor(o => item.PercentFFDRPFunds, new { @class = "form-control input-sm  number PercentFFDRPFunds activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:100%;" })
                <span class="input-group-addon"><b>%</b></span>
            </div>
        </td>
        <td>
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-dollar"></i></span>
                @Html.TextBoxFor(o => item.CACFundAmount, new { @class = "form-control input-sm  CACFundAmount text-right activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:80px;", @readonly = "readonly" })
            </div>
        </td>
        <td>
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-dollar"></i></span>
                @Html.TextBoxFor(o => item.FFDRPFundAmount, new { @class = "form-control input-sm FFDRPFundAmount text-right activity-day ignore-enterkey", tabindex = ++tabCount, style = "width:80px;", @readonly = "readonly" })
            </div>
        </td>
        @*<td>
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-dollar"></i></span>
                @Html.TextBoxFor(o => item.EligibleCost, new { @class = "form-control input-sm  EligibleCost text-right activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:80px;", @readonly = "readonly" })
            </div>

        </td>*@
        <td>
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-dollar"></i></span>
                @Html.TextBoxFor(o => item.EligibleAmountNonTraining, new { @class = "form-control input-sm EligibleAmountNonTraining  text-right activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:80px;", @readonly = "readonly" })
            </div>

        </td>
        <td>
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-dollar"></i></span>
                @Html.TextBoxFor(o => item.EligibleAmountAttorneyTraining, new { @class = "form-control input-sm  EligibleAmountAttorneyTraining text-right activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:80px;", @readonly = "readonly" })
            </div>

        </td>
        <td>
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-dollar"></i></span>
                @Html.TextBoxFor(o => item.EligibleAmountNonAttorneyTraining, new { @class = "form-control input-sm  EligibleAmountNonAttorneyTraining text-right activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:80px;", @readonly = "readonly" })
            </div>

        </td>
        <td>

            @Html.TextBoxFor(o => item.Note, new { @class = "form-control input-sm  Note  activity-day  ignore-enterkey", tabindex = ++tabCount, style = "width:200px;" })


        </td>
        <td>
            @if (item.TitleIVeOperatingExpenseID.HasValue && item.TitleIVeOperatingExpenseID.Value > 0)
            {

                @*<a class="btn btn-info btn-xs" onclick="OpenPopup('/Task/IVEAttachments?docType=OpExpense&TitleIVeItemID=@(item.TitleIVeOperatingExpenseID.Value.ToEncrypt())&TitleIVeInvoiceID=@(item.TitleIVeInvoiceID.Value.ToEncrypt())', '@item.UploadButton')">@item.UploadButton</a>*@

                <a class="btn btn-danger btn-xs btndelete" data-id="@item.TitleIVeOperatingExpenseID.Value">Delete </a>

            }
            else
            {
                item.UploadButton = "Upload Doc";
                @*<a class="btn btn-info btn-xs btnUpload" data-rowno="@(rowCount-1)" data-url="/Task/IVEAttachments?docType=OpExpense&TitleIVeInvoiceID=@(item.TitleIVeInvoiceID.Value.ToEncrypt())&TitleIVeItemID=">@item.UploadButton</a>*@

            }
        </td>
    </tr>

        rowCount++;
    }


</table>
@section fixedfooter{
    <div class="boxfloat text-center">
        <button id="btnExtraRows" type="button" class="btn btn-default v-bottom  ">Add More Rows</button>
        <button id="btnSave" type="submit" class="btn btn-primary v-bottom default btnSave" data-id="-1">Save</button>
        <button id="btnSaveAndGoProfessional" type="button" class="btn btn-default v-bottom  btnSave" data-id="-2" data-href="/Task/IVEPersonnel/@Model.InvoiceID.ToEncrypt()?backtoinvoice=@Request.QueryString["backtoinvoice"]">Save and Go To Personnel</button>
        <button id="btnSaveAndGoTravel" type="button" class="btn btn-default v-bottom btnSave " data-id="-3" data-href="/Task/IVEProfessionalServices/@Model.InvoiceID.ToEncrypt()?backtoinvoice=@Request.QueryString["backtoinvoice"]">Save and Go To Professional</button>
        <button id="btnSaveAndGoOperating" type="button" class="btn btn-default v-bottom  btnSave" data-id="-4" data-href="/Task/IVETravelExpenses/@Model.InvoiceID.ToEncrypt()?backtoinvoice=@Request.QueryString["backtoinvoice"]">Save and Go To Travel</button>

        @if (Request.QueryString["backtoinvoice"] != null)
        {
            <button id="btnBack" type="button" onclick="document.location.href='@Request.QueryString["backtoinvoice"].ToDecrypt()'" class="btn btn-default v-bottom  ">Cancel</button>

        }
    </div>
}
@section scripts{

    <script>
        $('#btnExtraRows').click(function () {
            $tr = $('#ExtraRows tr').clone();
            $($tr).insertBefore('#tblIVEOperatingExpenses tbody tr.footerrow');
            
            $('*[tabindex]').each(function (index) {
                $(this).attr('tabindex', index + 1);
            })
        })

        function CalculateRowFields($tr) {
            var TotalAmountPaid = $tr.find('#item_ExpenseAmount').val();


            //var PercentDependency = $tr.find('#item_PercentDependency').val();

            var PercentCACFunds = $tr.find('#item_PercentCACFunds').val();

            var PercentFFDRPFunds = $tr.find('#item_PercentFFDRPFunds').val();

            var CACFundAmount = (TotalAmountPaid * PercentCACFunds / 100).toFixed(2);;
            $tr.find('#item_CACFundAmount').val(CACFundAmount);

            var FFDRPFundAmount = (TotalAmountPaid * PercentFFDRPFunds / 100).toFixed(2);;
            $tr.find('#item_FFDRPFundAmount').val(FFDRPFundAmount);


            //var EligibleCost = (PercentDependency * ((parseFloat(CACFundAmount) + parseFloat(FFDRPFundAmount)) / 100)).toFixed(2);
            //$tr.find('#item_EligibleCost').val(EligibleCost);
           

            var EligibleNonTraining = $tr.find('#item_EligibleNonTraining').val();
            var EligibleAmountNonTraining = (EligibleNonTraining * ((parseFloat(CACFundAmount) + parseFloat(FFDRPFundAmount)) / 100)).toFixed(2);
            $tr.find('#item_EligibleAmountNonTraining').val(EligibleAmountNonTraining);

            var EligibleAttorneyTraining = $tr.find("#item_EligibleAttorneyTraining").val();
            var EligibleAmountAttorneyTraining = (EligibleAttorneyTraining * ((parseFloat(CACFundAmount) + parseFloat(FFDRPFundAmount)) / 100)).toFixed(2);
            $tr.find('#item_EligibleAmountAttorneyTraining').val(EligibleAmountAttorneyTraining);

            var EligibleNonAttorneyTraining = $tr.find("#item_EligibleNonAttorneyTraining").val();
            var EligibleAmountNonAttorneyTraining = (EligibleNonAttorneyTraining * ((parseFloat(CACFundAmount) + parseFloat(FFDRPFundAmount)) / 100)).toFixed(2);
            $tr.find('#item_EligibleAmountNonAttorneyTraining').val(EligibleAmountNonAttorneyTraining);
            CalculateSumFields();
        }

        function CalculateSumFields() {
            var sumCAC = 0, sumOEA = 0, sumFFDRP = 0, sumEligibleNonTraining = 0, sumEligibleAmountAttorneyTraining = 0, sumEligibleAmountNonAttorneyTraining = 0;
            $('.CACFundAmount').each(function () {
                if (parseFloat(this.value) >= 0)
                    sumCAC += parseFloat(this.value);
            });

            $('.FFDRPFundAmount').each(function () {
                if (parseFloat(this.value) >= 0)
                    sumFFDRP += parseFloat(this.value);
            });

            $('.EligibleAmountNonTraining').each(function () {
                if (parseFloat(this.value) >= 0)
                    sumEligibleNonTraining += parseFloat(this.value);
            });
            $('.EligibleAmountAttorneyTraining').each(function () {
                if (parseFloat(this.value) >= 0)
                    sumEligibleAmountAttorneyTraining += parseFloat(this.value);
            });
            $('.EligibleAmountNonAttorneyTraining').each(function () {
                if (parseFloat(this.value) >= 0)
                    sumEligibleAmountNonAttorneyTraining += parseFloat(this.value);
            });
            $('.ExpenseAmount').each(function () {
                if (parseFloat(this.value) >= 0)
                    sumOEA += parseFloat(this.value);
            });
            
            $("#SumTotalOperatingExpensesAmount").text("$" + sumOEA.toFixed(2));
            $("#SumCACFundAmount").text("$" + sumCAC.toFixed(2));
            $("#SumFFDRPFundAmount").text("$" + sumFFDRP.toFixed(2));
            $("#SumEligibleAmountNonTraining").text("$" + sumEligibleNonTraining.toFixed(2));
            $("#SumEligibleAmountAttorneyTraining").text("$" + sumEligibleAmountAttorneyTraining.toFixed(2));
            $("#SumEligibleAmountNonAttorneyTraining").text("$" + sumEligibleAmountNonAttorneyTraining.toFixed(2));
        }
        function Validation(buttonId) {
            var IsValid = true;
            $("#tblIVEOperatingExpenses tbody tr.trOperatingExpList").each(function (index) {
                var tr = $(this);
                var flag = true;

                if (!(buttonId <= -1)) {
                    flag = false;
                    if (buttonId == index) {
                        flag = true;
                    }
                }

                if (tr.find('#item_ExpenseDate').hasValue() && flag) {
                    if (tr.find('#item_EligibleNonTraining').val() == '0')
                        tr.find('#item_EligibleNonTraining').val('');

                    if (tr.find('#item_EligibleAttorneyTraining').val() == '0')
                        tr.find('#item_EligibleAttorneyTraining').val('');

                    if (tr.find('#item_EligibleNonAttorneyTraining').val() == '0')
                        tr.find('#item_EligibleNonAttorneyTraining').val('');

                    if (tr.find('#item_PercentCACFunds').val() == '0')
                        tr.find('#item_PercentCACFunds').val('');

                    if (tr.find('#item_PercentFFDRPFunds').val() == '0')
                        tr.find('#item_PercentFFDRPFunds').val('');

                    if (moment(tr.find('#item_ExpenseDate').val()) > moment()) {
                        IsValid = false;
                        tr.find('#item_ExpenseDate').focus();
                        notifyDanger('Expense Date can not be a future date.');
                        return false;

                    }

                    if (!tr.find('#item_ExpenseAmount').hasValue()) {
                        IsValid = false;
                        tr.find('#item_ExpenseAmount').focus();
                        notifyDanger('Expense Amount is required.');
                        return false;

                    }
                    //if (!tr.find('#item_PercentDependency').hasValue()) {
                    //    IsValid = false;
                    //    tr.find('#item_PercentDependency').focus();
                    //    notifyDanger('Related to FFDRP Eligible Activities is required.');
                    //    return false;

                    //}

                    //else if (parseFloat(tr.find('#item_PercentDependency').val()) < 0 || parseFloat(tr.find('#item_PercentDependency').val()) > 100) {
                    //    IsValid = false;
                    //    tr.find('#item_PercentDependency').focus();
                    //    notifyDanger('Related to FFDRP Eligible Activities must be between 0 and 100.');
                    //    return false;

                    //}


                    if (!tr.find('#item_PercentCACFunds').hasValue() && !tr.find('#item_PercentFFDRPFunds').hasValue()) {
                        IsValid = false;
                        tr.find('#item_PercentCACFunds').focus();
                        notifyDanger('% CAC Base is required.');
                        return false;

                    }
                    if (!tr.find('#item_PercentFFDRPFunds').hasValue() && !tr.find('#item_PercentCACFunds').hasValue()) {
                        IsValid = false;
                        tr.find('#item_PercentFFDRPFunds').focus();
                        notifyDanger('% FFDRP Enhancement is required.');
                        return false;

                    }
                    if (!tr.find('#item_EligibleNonTraining').hasValue() &&
                        !tr.find('#item_EligibleAttorneyTraining').hasValue() &&
                        !tr.find('#item_EligibleNonAttorneyTraining').hasValue()) {
                        IsValid = false;
                        tr.find('#item_EligibleNonTraining').focus();
                        notifyDanger('One of the columns required value (Non-Training Related, Attorney Training, Non-Attorney Training).');
                        return false;
                    }
                    else if (parseFloat(tr.find('#item_EligibleNonTraining').val()) < 0 || parseFloat(tr.find('#item_EligibleNonTraining').val()) > 100) {
                        IsValid = false;
                        tr.find('#item_EligibleNonTraining').focus();
                        notifyDanger('% Non-Training Related must be between 0 and 100.');
                        return false;
                    }
                    else if (parseFloat(tr.find('#item_EligibleAttorneyTraining').val()) < 0 || parseFloat(tr.find('#item_EligibleAttorneyTraining').val()) > 100) {
                        IsValid = false;
                        tr.find('#item_EligibleAttorneyTraining').focus();
                        notifyDanger('% Attorney Training must be between 0 and 100.');
                        return false;
                    }
                    else if (parseFloat(tr.find('#item_EligibleNonAttorneyTraining').val()) < 0 || parseFloat(tr.find('#item_EligibleNonAttorneyTraining').val()) > 100) {
                        IsValid = false;
                        tr.find('#item_EligibleNonAttorneyTraining').focus();
                        notifyDanger('% Non-Attorney Training must be between 0 and 100.');
                        return false;
                    }
                    

                    var percentageFunds = ConvertToFloat(tr.find('#item_PercentCACFunds').val()) + ConvertToFloat(tr.find('#item_PercentFFDRPFunds').val());
                    if (percentageFunds > 100) {
                        IsValid = false;
                        tr.find('#item_PercentCACFunds').focus();
                        notifyDanger('The Identify Funding % columns must not exceed 100');
                        return false;

                    }
                    if (percentageFunds == 0) {
                        IsValid = false;
                        tr.find('#item_PercentCACFunds').focus();
                        notifyDanger('Please enter a value in the Identify Funding %');

                        return false;

                    }
                   

                    var percentageTrainings = ConvertToFloat(tr.find('#item_EligibleNonTraining').val()) + ConvertToFloat(tr.find('#item_EligibleAttorneyTraining').val())
                        + ConvertToFloat(tr.find('#item_EligibleNonAttorneyTraining').val());
                    if (percentageTrainings > 100) {
                        IsValid = false;
                        tr.find('#item_EligibleNonTraining').focus();
                        notifyDanger('The % Related TO Dependency columns must not exceed 100');
                        return false;

                    }
                    if (percentageTrainings == 0) {
                        IsValid = false;
                        tr.find('#item_EligibleNonTraining').focus();
                        notifyDanger('Please enter a value in the Enter % Related TO Dependency');


                        return false;

                    }
                }
            })

            return IsValid;
        }
        function GetFormData(buttonId) {
            var data = [];
            $("#tblIVEOperatingExpenses tbody tr.trOperatingExpList").each(function (index) {
                var tr = $(this);
                var flag = true;

                if (!(buttonId <= -1)) {
                    flag = false;
                    if (buttonId == index) {
                        flag = true;
                    }
                }

                if (tr.find('#item_ExpenseDate').hasValue() && flag) {
                    data.push({
                        TitleIVeOperatingExpenseID: tr.find('#item_TitleIVeOperatingExpenseID').val(),
                        TitleIVeInvoiceID: tr.find('#item_TitleIVeInvoiceID').val(),
                        ExpenseDate: tr.find('#item_ExpenseDate').val(),
                        InvoiceReferenceNbr: tr.find('#item_InvoiceReferenceNbr').val(),
                        ExpenseDescription: tr.find('#item_ExpenseDescription').val(),
                        ExpenseProvider: tr.find('#item_ExpenseProvider').val(),
                        ExpenseAmount: tr.find('#item_ExpenseAmount').val(),
                        ForIndividual: tr.find('#item_ForIndividual').is(':checked') ? true : false,
                       // PercentDependency: tr.find('#item_PercentDependency').val(),
                        PercentCACFunds: tr.find('#item_PercentCACFunds').val(),
                        PercentFFDRPFunds: tr.find('#item_PercentFFDRPFunds').val(),
                        CACFundAmount: tr.find('#item_CACFundAmount').val(),
                        FFDRPFundAmount: tr.find('#item_FFDRPFundAmount').val(),
                        EligibleCost: tr.find('#item_EligibleCost').val(),
                        InsertedByUserID: tr.find('#item_InsertedByUserID').val(),
                        InsertedOnDateTime: tr.find('#item_InsertedOnDateTime').val(),
                        UpdatedByUserID: tr.find('#item_UpdatedByUserID').val(),
                        UpdatedOnDateTime: tr.find('#item_UpdatedOnDateTime').val(),
                        RecordStateID: tr.find('#item_RecordStateID').val(),

                        EligibleNonTraining: tr.find('#item_EligibleNonTraining').val(),
                        EligibleAttorneyTraining: tr.find('#item_EligibleAttorneyTraining').val(),
                        EligibleNonAttorneyTraining: tr.find('#item_EligibleNonAttorneyTraining').val(),
                        EligibleAmountNonTraining: tr.find('#item_EligibleAmountNonTraining').val(),
                        EligibleAmountAttorneyTraining: tr.find('#item_EligibleAmountAttorneyTraining').val(),
                        EligibleAmountNonAttorneyTraining: tr.find('#item_EligibleAmountNonAttorneyTraining').val(),
                        Note: tr.find('#item_Note').val(),
                    });
                }
            });
            return data;
        }
        function ValidateDocumentUpload(buttonId) {
            var flag = true;
            if (!(buttonId <= -1)) {
                return true;

            }
            $("#tblIVEOperatingExpenses tbody tr.trOperatingExpList").each(function (index) {
                var tr = $(this);



                if (tr.find('#item_ExpenseDate').hasValue() && flag) {

                    if (tr.find('.btnUpload').text() == 'Upload Doc') {
                        //  flag = false;
                        //notifyDanger('Upload document is required.');

                    }
                }

            });

            return flag;
        }

        function SaveIVEOperatingExpenses(buttonId) {
            if (!hasFormChanged("IVEOperatingExpenses-form")) {
                notifyDanger("Nothing was changed");
                return false;
            }
            debugger
            if (Validation(buttonId)) {
                debugger
                if (!ValidateDocumentUpload(buttonId))
                    return;

                var formData = GetFormData(buttonId);
                $.ajax({
                    type: "POST", url: '/Task/IVEOperatingExpenses', data: JSON.stringify(formData), contentType: 'application/json', cache: false,
                    success: function (result) {
                        if (buttonId == -1) {
                            if (result.isSuccess) {
                                notifySuccess("Data saved successfully.");
                                document.location.href = document.location.href;
                            }
                            else {
                                notifyDanger(result.message);
                            }
                        } else if (buttonId < -1) {
                            if (result.isSuccess) {
                                notifySuccess("Data saved successfully.");
                                document.location.href = $('.btnSave[data-id="' + buttonId + '"]').data('href');
                            }
                            else {
                                notifyDanger(result.message);
                            }
                        }
                        else if (result.LastTitleIVeOperatingExpenseID !== "") {
                            var btn = $('.btnUpload[data-rowno="' + buttonId + '"]');
                            OpenPopup(btn.data('url') + result.LastTitleIVeOperatingExpenseID, btn.html());
                        }
                    }
                });
            }

        }

        $("#tblIVEOperatingExpenses").on("keyup", ".activity-day", function (e) {
            e = e || window.event;
            if (e.which == 39 || e.which == 13) { // right arrow


                if ($(this).closest('td').index() == 11) {

                    $(this).closest('tr').next().find('td:eq(1)').find('input').focus();
                    $(this).closest('tr').next().find('td:eq(1)').find('select').focus();
                } else {
                    $(this).closest('td').next().find('input').focus();
                    $(this).closest('td').next().find('select').focus();
                }
            } else if (e.which == 37) { // left arrow
                $(this).closest('td').prev().find('input').focus();
                $(this).closest('td').prev().find('select').focus();

            } else if (e.which == 40) { // down arrow OR Enter
                $(this).closest('tr').next().find('td:eq(' + $(this).closest('td').index() + ')').find('input').focus();
                $(this).closest('tr').next().find('td:eq(' + $(this).closest('td').index() + ')').find('select').focus();

            } else if (e.which == 38) { // up arrow
                $(this).closest('tr').prev().find('td:eq(' + $(this).closest('td').index() + ')').find('input').focus();
                $(this).closest('tr').prev().find('td:eq(' + $(this).closest('td').index() + ')').find('select').focus();
            }
        });
        $('body').on('change', '.ExpenseAmount', function () {
      

            CalculateRowFields($(this).closest('tr'));
        })
        $('body').on('change', '.EligibleNonTraining, .EligibleAttorneyTraining, .EligibleNonAttorneyTraining', function () {
 
            CalculateRowFields($(this).closest('tr'));
        })
        $('body').on('change', '.PercentCACFunds', function () {
 
            var tr = $(this).closest('tr');
            CalculateRowFields(tr);

            var percentageFunds = parseInt(tr.find('#item_PercentCACFunds').val()) + parseInt(tr.find('#item_PercentFFDRPFunds').val());
            if (percentageFunds > 100) {
                IsValid = false;
                if (parseInt(tr.find('#item_PercentCACFunds').val()) > parseInt(tr.find('#item_PercentFFDRPFunds').val()))
                    tr.find('#item_PercentCACFunds').focus();
                else
                    tr.find('#item_PercentFFDRPFunds').focus();
                notifyDanger('CAC Base and FFDRP Enhancement % must be under 100%.');
                return false;

            }
        })
        $('body').on('change', '.PercentFFDRPFunds', function () {
        

            var tr = $(this).closest('tr');
            CalculateRowFields(tr);
            var percentageFunds = parseInt(tr.find('#item_PercentCACFunds').val()) + parseInt(tr.find('#item_PercentFFDRPFunds').val());
            if (percentageFunds > 100) {
                IsValid = false;
                if (parseInt(tr.find('#item_PercentCACFunds').val()) > parseInt(tr.find('#item_PercentFFDRPFunds').val()))
                    tr.find('#item_PercentCACFunds').focus();
                else
                    tr.find('#item_PercentFFDRPFunds').focus();
                notifyDanger('CAC Base and FFDRP Enhancement % must be under 100%.');
                return false;

            }
        })

        $('.btnSave').click(function (e) {
            e.preventDefault();
            SaveIVEOperatingExpenses($(this).data('id'));
        });
        $('.btnUpload').click(function (e) {
            e.preventDefault();

            SaveIVEOperatingExpenses($(this).attr('data-rowno'));
        });
        $(document).ready(function () {
            $("#tblIVEOperatingExpenses tbody tr.trOperatingExpList").each(function () {
                CalculateRowFields($(this));
            });

            setInitialFormValues("IVEOperatingExpenses-form");
            $('.readonly input,.readonly select').attr('disabled', 'disabled')
        });
        $('.btndelete').click(function (e) {
            e.preventDefault();

            var id = $(this).attr('data-id');
            var tr = $(this).parent().parent();

            confirmBox("Are you sure you want to remove this records?", function (result) {
                if (result) {
                    $.ajax({
                        type: "POST", url: '/Task/IVEOperatingExpensesDelete/' + id,
                        dataType: "json",
                        success: function (data) {
                            if (data.isSuccess) {

                                notifySuccess('Record delete successfully.');
                                document.location.href = document.location.href;
                            }

                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                        }
                    });
                }
                else {
                }
            });
        });

    </script>

}