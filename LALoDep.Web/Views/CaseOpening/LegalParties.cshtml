@using LALoDep.Core.Custom.Extensions
@using Microsoft.Ajax.Utilities
@using LALoDep.Custom.Security
@model LALoDep.Models.CaseOpening.LegalPartiesModel
@{
    bool isDataEntry = Request.QueryString["dataentry"] != null;

    ViewBag.Title = "Add Legal Parties";
    var legalTypes = Model.RoleGetLegalSpecificList.DistinctBy(o => o.LegalType).ToList();
}
<style>
    .form-inline .input-group {
        display: table;
    }

    #tblLegalPartiesList tr td, #tblLegalPartiesList tr th {
        vertical-align: middle;
    }
</style>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "case-legalparties-form" }))
{
    <div class="row">
        <div class="col-md-12 col-sm-12 center-block" style="padding:0">
            <div class="col-md-8 col-xs-12">
                <div class="widget">
                    <div class="widget-header bordered-bottom bordered-themeprimary col-xs-12">
                        <span class="widget-caption">Role</span>
                        <div class="widget-buttons">
                            &nbsp;
                        </div>
                    </div>
                    <div class="widget-body col-xs-12">
                        <div class="table-responsive">
                            <table class="table table-bordered table-condensed table-hover table-padding table-striped" id="tblLegalPartyRoleList">
                                <thead>

                                    <tr>
                                        <th>Role  </th>
                                        <th>Name  </th>
                                        <th> Role Start Date   </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in legalTypes)
                                    {
                                        if (Model.RoleLegalStatusList.Any(o => o.LegalTypeID == item.LegalTypeID && o.Multiple == 0 && o.OnCase == 1))
                                        {
                                            continue;
                                        }
                                        <tr>
                                            <td>

                                                @item.LegalType

                                            </td>
                                            <td>
                                                @{
                                                    var items = Model.RoleGetLegalSpecificList.Where(o => o.LegalType == item.LegalType).Select(o => new SelectListItem()
                                                    {
                                                        Value = o.PersonID.ToString() + '|' + o.RealLegalTypeID.ToString(),
                                                        Text = o.FullName
                                                    });
                                                    @Html.DropDownListFor(model => item.LegalTypeID, items, "", new { @class = "form-control input-sm", tabindex = 1, style = "width:100%", autofocus = "autofocus", data_name = item.LegalType })
                                                }

                                            </td>

                                            <td>
                                                <div class="input-group">
                                                    @Html.TextBox("LegalPartyRoleStartDate", Model.RoleStartDate, new { @class = "form-control input-sm  input-sm date-picker-control", tabindex = 1, style = "width:100% !important;", maxlength = "10" })
                                                    <span class="input-group-addon datepicker-control-trigger">
                                                        <i class="fa fa-calendar"></i>
                                                    </span>
                                                </div>
                                            </td>
                                        </tr>
                                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4 col-xs-12">
                <div class="widget">
                    <div class="widget-header bordered-bottom bordered-themeprimary">
                        <span class="widget-caption">Association For Other Agency Attorney</span>
                        <div class="widget-buttons">
                            &nbsp;
                        </div>
                    </div>
                    <div class="widget-body col-xs-12">

                        <div class="table-responsive">
                            <table class="table table-bordered table-condensed table-hover table-padding table-striped" id="tblAssociationList">
                                <thead>
                                    <tr>
                                        <th colspan="2">Associate to:  </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.AssociationAttorneyList)
                                    {
                                        <tr>
                                            <td width="30">

                                                <input type="hidden" id="PersonID" value="@item.PersonID" />

                                                <input type="checkbox" id="chkAttorney" tabindex="2" />

                                            </td>
                                            <td>@item.PersonNameDisplay</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                    </div>
                </div>
            </div>

        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-12 col-sm-12 center-block" style="padding: 0">
            <div class="col-md-8 col-xs-12">
                <div class="widget">
                    <div class="widget-header bordered-bottom bordered-themeprimary col-xs-12">
                        <span class="widget-caption">New Role</span>
                        <div class="widget-buttons">
                            &nbsp;
                        </div>
                    </div>
                    <div class="widget-body col-xs-12 form-inline ">
                        <div class="form-group col-xs-3">
                            @Html.LabelFor(m => m.NewRoleID, "New Role ", new { @class = "control-label" })
                            @Html.DropDownListFor(m => m.NewRoleID, Model.NewRoleList, "", new { @class = "form-control input-sm newroleinput", tabindex = 3, style = "width:100%" })

                        </div>


                        <div class="form-group col-xs-3">
                            @Html.LabelFor(m => m.FirstName, "New First Name", new { @class = "control-label" })
                            @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control input-sm   newroleinput ", tabindex = 4, style = "width:100%" })
                        </div>


                        <div class="form-group col-xs-3">
                            @Html.LabelFor(m => m.LastName, "New Last Name ", new { @class = "control-label" })
                            @Html.TextBoxFor(m => m.LastName, new { @class = "form-control input-sm newroleinput", tabindex = 5, style = "width:100%" })
                        </div>
                        <div class="form-group  col-xs-3" style="width: 150px">
                            @Html.LabelFor(m => m.RoleStartDate, "New Role Date", new { @class = "control-label" })
                            <div class="input-group">
                                @Html.TextBoxFor(m => m.RoleStartDate, "{0:MM/dd/yyyy}", new { @class = "form-control   input-sm  input-sm date-picker-control", tabindex = 6, style = "width:100% !important;", maxlength = "10" })
                                <span class="input-group-addon datepicker-control-trigger">
                                    <i class="fa fa-calendar"></i>
                                </span>
                            </div>

                        </div>

                        <div class="form-group  col-xs-3">
                            @Html.LabelFor(m => m.AddressTypeID, "Address Type", new { @class = "control-label" })
                            @Html.DropDownListFor(m => m.AddressTypeID, Model.AddressTypeList, "", new { @class = "form-control newroleinput input-sm", tabindex = 7, style = "width:98%" })

                        </div>
                        <div class="form-group  col-xs-3">
                            @Html.LabelFor(m => m.AddrStartDate, "Addr. Start Date", new { @class = "control-label" })
                            <div class="input-group">
                                @Html.TextBoxFor(m => m.AddrStartDate, "{0:MM/dd/yyyy}", new { @class = "form-control input-sm   input-sm date-picker-control", tabindex = 8, style = "width:100% !important;", maxlength = "10" })
                                <span class="input-group-addon datepicker-control-trigger">
                                    <i class="fa fa-calendar"></i>
                                </span>
                            </div>
                        </div>

                        <div class="form-group col-xs-6">
                            @Html.LabelFor(m => m.Street, "Street", new { @class = "control-label" })
                            @Html.TextBoxFor(m => m.Street, new { @class = "form-control input-sm newroleinput", tabindex = 9, style = "width:100%" })
                        </div><div class="form-group col-xs-3">
                            @Html.LabelFor(m => m.City, "City", new { @class = "control-label" })
                            @Html.TextBoxFor(m => m.City, new { @class = "form-control input-sm newroleinput", tabindex = 10, style = "width:100%" })
                        </div><div class="form-group col-xs-3">
                            @Html.LabelFor(m => m.StateID, "State", new { @class = "control-label" })
                            @*@Html.DropDownListFor(m => m.StateID, Model.StateList, "", new { @class = "form-control input-sm newroleinput", tabindex = 11, style = "width:98%", autofocus = "autofocus" })*@
                            <select class="form-control input-sm" id="StateID" tabindex=11 style="width:98%">
                                @foreach (var item in Model.StateList)
                                {
                                    <option value="@item.CodeID" data-id="@item.CodeShortValue" @if (item.CodeShortValue == "CA") { <text> selected="selected" </text>       }>@item.CodeValue</option>
                                }
                            </select>
                        </div><div class="form-group col-xs-3">
                            @Html.LabelFor(m => m.ZipCode, "Zip Code", new { @class = "control-label" })
                            @Html.TextBoxFor(m => m.ZipCode, new { @class = "form-control input-sm newroleinput", tabindex = 12, style = "width:100%" })
                        </div><div class="form-group col-xs-3">
                            @Html.LabelFor(m => m.AddressPhone, "Address Phone", new { @class = "control-label" })
                            @Html.TextBoxFor(m => m.AddressPhone, new { @class = "form-control input-sm phone_format newroleinput", tabindex = 13, style = "width:100%" })
                        </div>
                        <div class="form-group col-xs-3">
                            @Html.LabelFor(m => m.WorkPhone, "Work Phone", new { @class = "control-label" })
                            @Html.TextBoxFor(m => m.WorkPhone, new { @class = "form-control input-sm phone_format newroleinput", tabindex = 14, style = "width:100%" })
                        </div>
                        <div class="form-group col-xs-3">
                            @Html.LabelFor(m => m.MobilePhone, "Mobile Phone", new { @class = "control-label" })
                            @Html.TextBoxFor(m => m.MobilePhone, new { @class = "form-control input-sm phone_format newroleinput", tabindex = 15, style = "width:100%" })
                        </div>
                        <div class="form-group col-xs-6">
                            @Html.LabelFor(m => m.EmailAddress, "Email Address", new { @class = "control-label" })
                            @Html.TextBoxFor(m => m.EmailAddress, new { @class = "form-control input-sm newroleinput", tabindex = 16, style = "width:100%" })
                        </div>
                    </div>
                </div>
            </div><div class="visible-xs"><br /></div>
            <div class="col-md-4 col-xs-12">
                <div class="widget">
                    <div class="widget-header bordered-bottom bordered-themeprimary col-xs-12">
                        <span class="widget-caption">Association For New Role</span>
                        <div class="widget-buttons">
                            &nbsp;
                        </div>
                    </div>
                    <div class="widget-body col-xs-12">

                        <div class="table-responsive">
                            <table class="table table-bordered table-condensed table-hover table-padding table-striped" id="tblAssociationRelatedToList">
                                <thead>
                                    <tr>
                                        <th colspan="3">@Html.DropDownListFor(o => o.AssociationForNewRoleAssociationTypeID, Model.AssociationForNewRoleAssociationTypeList, "", new { @class = "form-control input-sm", tabindex = "17" }) </th>
                                    </tr>
                                    <tr>
                                        <th colspan="2">Associate to:  </th>
                                        <th>Lives With </th>

                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.AssociationRelatedToList)
                                    {
                                        <tr @if (item.RoleClient == 1) { <text> class="highLightBlue " </text>                }>
                                            <td width="30">

                                                <input type="hidden" id="PersonID" value="@item.PersonID" />

                                                <input type="checkbox" id="chkRelatedTo" tabindex="18" class="chkRelatedTo" />

                                            </td>
                                            <td>@item.PersonNameFirst @item.PersonNameLast (@item.Role)</td>
                                            <td>
                                                <input type="checkbox" id="chkLiveWith" class="chkLiveWith" tabindex="18" @if (item.Role != "Child") { <text> disabled="disabled" </text>         } />
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>


                    </div>
                </div>
            </div>

        </div>
    </div>

    <div class="row">
        <div class="col-md-12 col-sm-12 center-block" style="padding: 0 15px 0 15px">

            <div class="widget">
                <div class="widget-header bordered-bottom bordered-themeprimary col-xs-12">
                    <span class="widget-caption">Legal Parties In Case</span>
                    <div class="widget-buttons">
                        &nbsp;
                    </div>
                </div>
                <div class="widget-body col-xs-12">
                    <div class="table-responsive">
                        <table class="table table-bordered table-condensed table-hover table-padding table-striped" id="tblLegalPartiesList">
                            <thead>
                                <tr>
                                    <th>Role </th>
                                    <th>Name </th>
                                    <th width="150">Start Date </th>
                                    <th width="150">End Date </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.LegalPartiesList)
                                {
                                    <tr>
                                        <td @if (item.RoleClient == 1) { <text> class="highLightBlue " </text>              }>
                                            <input type="hidden" id="RoleID" value="@item.RoleID" />
                                            <input type="hidden" id="PersonID" value="@item.PersonID" />
                                            <input type="hidden" id="RoleTypeCodeID" value="@item.RoleTypeCodeID" />
                                            @item.LegalType
                                        </td>
                                        <td>
                                            <span>@item.FullName</span>
                                            @if (item.IsAgencyAttorneyFlag == 1 && !item.RoleEndDate.HasValue)
                                            {
                                                <button type="button" class="transfre-case btn btn-xs btn-primary pull-right" data-id="@ViewBag.caseId" data-p-Id="@item.PersonID.ToEncrypt()" data-role-type-Id="@item.RoleTypeCodeID.ToEncrypt()">Save/Transfer Case</button>
                                            }
                                        </td>
                                        <td>
                                            <div class="input-group">
                                                @if (item.IsAgencyAttorneyFlag == 1)
                                                {

                                                    @Html.TextBoxFor(m => item.RoleStartDate, "{0:MM/dd/yyyy}", new { @class = "form-control input-sm  input-sm date-picker-control", tabindex = 19, style = "width:100% !important;", maxlength = "10", data_val = item.RoleStartDate.ToDefaultFormat(), data_secure_disabled_id = ((int)SecurityToken.EditAttorneyStartEndDates) })

                                                }
                                                else
                                                {
                                                    @Html.TextBoxFor(m => item.RoleStartDate, "{0:MM/dd/yyyy}", new { @class = "form-control input-sm  input-sm date-picker-control", tabindex = 19, style = "width:100% !important;", maxlength = "10", data_val = item.RoleStartDate.ToDefaultFormat() })

                                                }
                                                <span class="input-group-addon datepicker-control-trigger">
                                                    <i class="fa fa-calendar"></i>
                                                </span>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="input-group">
                                                @if (item.IsAgencyAttorneyFlag == 1)
                                                {

                                                    @Html.TextBoxFor(m => item.RoleEndDate, "{0:MM/dd/yyyy}", new { @class = "form-control input-sm  input-sm date-picker-control", tabindex = 19, style = "width:100% !important;", maxlength = "10", data_val = item.RoleEndDate.ToDefaultFormat(), data_secure_disabled_id = ((int)SecurityToken.EditAttorneyStartEndDates) })
                                                }
                                                else
                                                {                   @Html.TextBoxFor(m => item.RoleEndDate, "{0:MM/dd/yyyy}", new { @class = "form-control input-sm  input-sm date-picker-control", tabindex = 19, style = "width:100% !important;", maxlength = "10", data_val = item.RoleEndDate.ToDefaultFormat() })
                                                } <span class="input-group-addon datepicker-control-trigger">
                                                    <i class="fa fa-calendar"></i>
                                                </span>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>


                </div>
            </div>
        </div>
    </div>
    <br />
    <br />
                                                    }
@section fixedfooter{
    <div class="boxfloat text-center">
        @if (!isDataEntry)
        {
            <button id="saveAndContinue" type="submit" class="btn btn-primary v-bottom default" tabindex="20">Save/Continue</button>
            <button id="saveAndAdd" type="submit" class="btn btn-default v-bottom " tabindex="20">Save/Add More</button>

        }
        else
        {
            <button id="saveAndMain" type="submit" class="btn btn-primary v-bottom default" tabindex="20"> Save/Main</button>
            <button id="saveAndAdd" type="submit" class="btn btn-default v-bottom " tabindex="20">Save/Return </button>

             if (Model.AllowTransfer)
            {
                <button id="saveAndTransfer" type="submit" class="btn btn-default v-bottom " tabindex="20">Copy Case Transfer - Subset of Clients </button>

            }
        }
    </div>

}
@if (!isDataEntry)
{
    @Html.Partial("_steps")
}


@section scripts
{
    @{
        var legalId = Model.RoleLegalStatusList.Where(o => o.SystemValueSequence == 1).Select(o => o.LegalTypeID).ToList();
        var ids = "";
        foreach (var id in legalId)
        {
            if (ids != "")
            { ids += ","; }
            ids += id;

        }
    }
@{
    var useHereMaps = System.Configuration.ConfigurationManager.AppSettings["UseHereMaps"];
}
    <script>
        var arrAttorneyIds = "@ids";

        var dataEntryQueryString = '@(isDataEntry ? "?dataentry=true" : "")';
    </script>
@if (string.IsNullOrEmpty(useHereMaps) || (!string.IsNullOrEmpty(useHereMaps) && useHereMaps == "false"))
{
    <script src="@Url.Content("//maps.googleapis.com/maps/api/js?key=" + LALoDep.Custom.UtilityFunctions.GetGoogleApiKeyFromConfig() + "&libraries=places")"></script>
    <script type="text/javascript">
        var placeSearch, autocomplete;
        var componentForm = {
            Street: 'short_name',
            route: 'long_name',
            City: 'long_name',
            administrative_area_level_1: 'short_name',
            country: 'long_name',
            ZipCode: 'short_name'
        };

        function initAutocomplete() {


            // Create the autocomplete object, restricting the search to geographical
            // location types
            autocomplete = new google.maps.places.Autocomplete(
               //type {!HTMLInputElement} */

                (document.getElementById('Street')),
                {
                    types: ['geocode'],
                    componentRestrictions: { country: "us" },//defalut,
                });

            // When the user selects an address from the dropdown, populate the address
            // fields in the form.

            //set defult bound of seected state
            setBoundByState();

            autocomplete.addListener('place_changed', fillInAddress);
        }

        google.maps.event.addDomListener(window, 'load', initAutocomplete);

        function fillInAddress() {

            // Get the place details from the autocomplete object.
            var place = autocomplete.getPlace();
            // Get each component of the address from the place details
            // and fill the corresponding field on the form.
            var street = '';
            var valZipCode = '';
            var valCity = '';
            var valState = '';

            for (var i = 0; i < place.address_components.length; i++) {
                var addressType = place.address_components[i].types[0];
                if (addressType == "street_number" || addressType == "route") {
                    street = street + " " + place.address_components[i].long_name;
                }

                else if (addressType == "locality") {
                    valCity = place.address_components[i].long_name;
                    document.getElementById('City').value = valCity;
                }
                else if (addressType == "postal_code") {
                    valZipCode = place.address_components[i].long_name;
                    document.getElementById('ZipCode').value = valZipCode;
                }
                else if (addressType == "administrative_area_level_1") {
                    valState = place.address_components[i].short_name;
                    $('#StateID option[data-id="' + valState + '"]').prop('selected', true);
                    setBoundByState();
                }
            }
            //set street
            document.getElementById('Street').value = street;//substring(1);//remove firt ','
        }

        function setBoundByState() {

            var geocoder = new google.maps.Geocoder();
            var address = $('#StateID option:selected').text();// + ', ' + $('#CountryCodeID option:selected').text();
            var geocoder = new google.maps.Geocoder();
            geocoder.geocode({ 'address': address }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    //alert("location : " + results[0].geometry.location.lat() + " " + results[0].geometry.location.lng());
                    var bounds = new google.maps.LatLngBounds(new google.maps.LatLng(results[0].geometry.location.lat(), results[0].geometry.location.lng()));
                    autocomplete.setBounds(bounds);
                } else {
                    //alert("Something got wrong " + status);
                }
            });

        }

        $('#StateID').on('change', function () {
            //alert($apiKey);
            setBoundByState();
        });

        //$('#CountryCodeID').on('change', function () {
        //    var country = $(this).find(':selected').attr('data-id')
        //    autocomplete.setComponentRestrictions({ 'country': country });
        //});

       
    </script>
}
else
{
    <text>
        <script>
                   var addressLookupAppId = '@System.Configuration.ConfigurationManager.AppSettings["HereMapAppId"]';
                   var addressLookupApiKey = '@System.Configuration.ConfigurationManager.AppSettings["HereMapApiKey"]';
        </script>
        <link href="~/assets/css/auto-Complete.css" rel="stylesheet" />

        <script src="/assets/other/jquery-ui-1.10.4.custom.min.js"></script>


        <script src="/assets/other/address-auto-complete.js"></script>

        <script>
                    

                    $(function () {



                        $("#Street").initAddressAutoComplete(function (address) {
                            var stateId = $("#StateCodeID").val();
                            for (var indx = 0; indx < $("#StateID option").length; indx++) {
                                var option = $("#StateID option").eq(indx);
                                if (address.state != undefined && option.attr('data-id').trim().toUpperCase() == address.state.toUpperCase()) {
                                    stateId = option.val();
                                    break;
                                }
                            }
                            $("#StateID").val(stateId);
                            $("#City").val(address.city);
                            $("#ZipCode").val(address.postalCode);
                        });
                    })

        </script>
    </text>
}
 <script src="@Url.Content("~/Scripts/Application-Script/CaseOpening/LegalParties.js?v=" + Guid.NewGuid())"></script>

}


