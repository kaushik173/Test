@using LALoDep.Custom
@using LALoDep.Custom.Security
@using LALoDep.Core.Custom.Extensions
    @model LALoDep.Models.CaseOpening.PetitionAddEditModel

    @{
        bool isDataEntry = Request.QueryString["dataentry"] != null;

        ViewBag.Title = "Add Petition";
        if (Model.PetitionID > 0)
        {
            ViewBag.Title = "Edit Petition";
        }
    }
    <style>
        .widget-buttons .btn {
            padding: 2px 15px !important;
        }
    </style>
    @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "petitionaddedit", @class = "form-inline  center-block" }))
    {
        <div class="row">
            <div class="col-md-12 col-sm-12 center-block" style="padding: 0 20px 0 20px">
                <div class="widget row">
                    <div class="widget-header bordered-bottom bordered-themeprimary col-xs-12">
                        <span class="widget-caption">
                            @if (Model.PetitionID > 0)
                            {
                                <text>Edit</text>
                            }
                            else
                            {
                                <text>Add</text>
                            }

                        </span>

                        <div class="widget-buttons">


                            &nbsp;
                        </div>
                    </div>
                    <div class="widget-body col-xs-12">

                        @Html.HiddenFor(o => o.AttorneyAgencyRoleTypeCodeID)
                        @Html.HiddenFor(o => o.CaseAttributeID)
                        @Html.HiddenFor(o => o.PetitionID)

                        <div class="form-group">
                            @Html.LabelFor(m => m.PetitionTypeID, "Petition Type ", new { @class = "control-label" })
                            @Html.DropDownListFor(m => m.PetitionTypeID, Model.PetitionTypeList, "", new { @class = "form-control input-sm", tabindex = 1, style = "width:98%", autofocus = "autofocus" })

                        </div>

                        <div class="form-group " style="width: 150px">
                            @Html.LabelFor(m => m.FileDate, "File Date", new { @class = "control-label" })
                            <div class="input-group">
                                @Html.TextBoxFor(m => m.FileDate, "{0:MM/dd/yyyy}", new { @class = "form-control input-sm  input-sm date-picker-control", tabindex = 2, style = "width:100% !important;", maxlength = "10" })
                                <span class="input-group-addon datepicker-control-trigger">
                                    <i class="fa fa-calendar"></i>
                                </span>
                            </div>

                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.CaseNumber, "Case #", new { @class = "control-label" })
                            @Html.TextBoxFor(m => m.CaseNumber, new { @class = "form-control input-sm  uppercase ", tabindex = 3 })
                        </div>

                        <div class="form-group  @if (Model.CaseClosedDate == 1 && Model.PetitionID ==0){<text> hidden </text>}" style="w style="width: 150px">
                            @Html.LabelFor(m => m.CloseDate, "Close Date", new { @class = "control-label" })
                            <div class="input-group">
                                @Html.TextBoxFor(m => m.CloseDate, "{0:MM/dd/yyyy}", new { @class = "form-control input-sm  input-sm date-picker-control", tabindex = 2, style = "width:100% !important;", maxlength = "10", disabled = "disabled" })
                                <span class="input-group-addon datepicker-control-trigger disabled">
                                    <i class="fa fa-calendar"></i>
                                </span>
                            </div>
                        </div>
                        @if (Model.CaseClosedDate == 1 && Model.PetitionID == 0)
                        {

                            <div class="form-group ">
                                @Html.LabelFor(m => m.AttorneyID, "Select Current Attorney or Reassign Case To", new { @class = "control-label" })
                                @Html.DropDownListFor(m => m.AttorneyID, Model.AttorneyList, "", new { @class = "form-control input-sm", tabindex = 1, style = "width:98%" })


                            </div>

                        }


                        <div class="form-group">
                            @Html.LabelFor(m => m.PhysicalFileName, "Physical File Name ", new { @class = "control-label" })
                            @Html.TextBoxFor(m => m.PhysicalFileName, new { @class = "form-control input-sm", tabindex = 5 })
                        </div>







                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 col-sm-12 center-block" style="padding: 0 20px 0 20px">
                <div class="widget row">
                    <div class="widget-header bordered-bottom bordered-themeprimary col-xs-12">
                        <span class="widget-caption">Roles</span>
                        <div class="widget-buttons">


                            @if (Model.RoleList.Where(o => o.UsePetitionRoleDateRange == 1).Any())
                            {
                                var roles = Model.RoleList.Where(o => o.UsePetitionRoleDateRange == 1).Select(o => new { MinPetitionRoleStartDate = o.PetitionRoleStartDate.ToDateTimeNullableValue(), MaxPetitionRoleEndDate = o.PetitionRoleEndDate.ToDateTimeNullableValue() });

                                <div>
                                    @Html.Hidden("MinPetitionRoleStartDate", roles.Min(o => o.MinPetitionRoleStartDate).ToDefaultFormat());
                                    @Html.Hidden("MaxPetitionRoleEndDate", roles.Max(o => o.MaxPetitionRoleEndDate).ToDefaultFormat());

                                </div>


                            }
                            else
                            { <div>
                            @Html.Hidden("MinPetitionRoleStartDate", "");
                            @Html.Hidden("MaxPetitionRoleEndDate", "");

                        </div>


                            }
                        </div>
                    </div>
                    <div class="widget-body col-xs-12">
                        <div class="table-responsive">
                            <table class="table table-bordered table-condensed table-hover table-padding table-striped" id="tblRoles">
                                <thead>
                                    <tr>
                                        <th>On</th>
                                        <th>Role</th>
                                        <th>Person Name</th>
                                        <th>Case Role Date Range</th>




                                        <th>
                                            On Petition Date
                                        </th>
                                        <th>
                                            Off Petition Date
                                        </th>


                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        var defaultClientPersonID = 0;
                                        var defaultChildPersonID = 0;

                                        var clients = Model.RoleList.Where(o => o.RoleClient == 1).ToList();
                                        if (clients.Count == 1)
                                        {
                                            defaultClientPersonID = clients[0].PersonID.Value;
                                        }


                                        var children = Model.RoleList.Where(o => o.Role == "Child").ToList();
                                        if (children.Count == 1)
                                        {
                                            defaultChildPersonID = children[0].PersonID.Value;
                                        }

                                    }
                                    @foreach (var item in Model.RoleList)
                                    {
                                        var childAdded = false;
                                        var clientAdded = false;
                                        <tr @if (item.RoleClient == 1) { <text> class="highLightBlue " </text>    }>
                                            <td>
                                                @if (Model.PetitionID == 0 && string.IsNullOrEmpty(item.RoleEndDate))
                                                {

                                                    item.Selected = Model.RoleTypeList.Any(o => o.CodeID == item.RoleTypeCodeID && o.Selected == 1) ? 1 : 0;
                                                    if (UserEnvironment.UserManager.UserExtended.Status == "Open" && item.Role.Contains("Attorney"))
                                                    {
                                                        item.Selected = 1;
                                                    }
                                                    else if (Model.RoleList.Count(o => o.ChildFlag == 1) == 1 && item.ChildFlag == 1 && !childAdded)
                                                    {
                                                        childAdded = true;
                                                        item.Selected = 1;

                                                    }
                                                    else if (Model.RoleList.Count(o => o.RoleClient == 1) == 1 && item.RoleClient == 1 && !clientAdded)
                                                    {
                                                        clientAdded = true;
                                                        item.Selected = 1;

                                                    }
                                                    else if (item.ChildFlag != 1)
                                                    {
                                                        item.Selected = 1;

                                                    }
                                                }
                                                @if (item.RoleClient == 0 && Model.PetitionID == 0 && string.IsNullOrEmpty(item.RoleEndDate))
                                                {

                                                    <input data-secure-disabled-id="@((int)SecurityToken.AddDeletePetitionRole)" type="checkbox" tabindex="8" id="chkItem" @(!string.IsNullOrEmpty(item.RoleEndDate) ? "disabled='disabled'" : "") @((item.Selected == 1 || defaultChildPersonID == item.PersonID || defaultClientPersonID == item.PersonID) ? "checked='checked'" : "") />

                                                }
                                                else
                                                {

                                                    <input data-secure-disabled-id="@((int)SecurityToken.AddDeletePetitionRole)" type="checkbox" tabindex="8" id="chkItem" @(((!string.IsNullOrEmpty(item.RoleEndDate) && Model.PetitionID == 0) || (Model.PetitionID > 0 && item.Selected == 0 && !string.IsNullOrEmpty(item.RoleEndDate))) ? "disabled='disabled'" : "") @((item.Selected == 1 || defaultChildPersonID == item.PersonID) ? "checked='checked'" : "") />

                                                }
                                                <input type="hidden" id="PetitionRoleID" value="@item.PetitionRoleID" />
                                                <input type="hidden" id="RoleID" value="@item.RoleID" />
                                                <input type="hidden" id="RoleTypeCodeID" value="@item.RoleTypeCodeID" />

                                                <input type="hidden" id="ChildFlag" value="@item.ChildFlag" />

                                                <input type="hidden" id="RespondentFlag" value="@item.RespondentFlag" />
                                            </td>
                                            <td>@item.Role</td>
                                            <td>@item.PersonName</td>
                                            <td>@item.CaseRoleDateRange</td>



                                            <td>
                                                @if (item.UsePetitionRoleDateRange == 1)
                                                {


                                                    if (!string.IsNullOrEmpty(item.PetitionRoleStartDate) && !string.IsNullOrEmpty(item.PetitionRoleEndDate))
                                                    {
                                                        <div class="input-group">
                                                            @Html.TextBoxFor(m => item.PetitionRoleStartDate, "{0:MM/dd/yyyy}", new { @class = "form-control input-sm  input-sm date-picker-control PetitionRoleStartDate", tabindex = 2, style = "width:100% !important;", maxlength = "10", disabled = "disabled" })
                                                            <span class="input-group-addon datepicker-control-trigger">
                                                                <i class="fa fa-calendar"></i>
                                                            </span>
                                                        </div>
                                                    }
                                                    else
                                                    {

                                                        <div class="input-group">
                                                            @Html.TextBoxFor(m => item.PetitionRoleStartDate, "{0:MM/dd/yyyy}", new { @class = "form-control input-sm  input-sm date-picker-control PetitionRoleStartDate", tabindex = 2, style = "width:100% !important;", maxlength = "10" })
                                                            <span class="input-group-addon datepicker-control-trigger">
                                                                <i class="fa fa-calendar"></i>
                                                            </span>
                                                        </div>
                                                    }
                                                }
                                            </td>
                                            <td>
                                                @if (item.UsePetitionRoleDateRange == 1)
                                                {

                                                    <div class="input-group">
                                                        @Html.TextBoxFor(m => item.PetitionRoleEndDate, "{0:MM/dd/yyyy}", new { @class = "form-control input-sm  input-sm date-picker-control PetitionRoleEndDate", tabindex = 2, style = "width:100% !important;", maxlength = "10", disabled = "disabled" })
                                                        <span class="input-group-addon datepicker-control-trigger">
                                                            <i class="fa fa-calendar"></i>
                                                        </span>
                                                    </div>

                                                }
                                            </td>




                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 col-sm-12 center-block" style="padding: 0 20px 0 20px">
                <div class="widget row">
                    <div class="widget-header bordered-bottom bordered-themeprimary col-xs-12">
                        <span class="widget-caption">Allegations</span>
                        <div class="widget-buttons">
                            <a class="btnAddAllegation btn btn-labeled btn-default btn " data-secure-id="@((int)SecurityToken.AddAllegation)">Add</a>
                        </div>
                    </div>
                    <div class="widget-body col-xs-12">
                        <div class="table-responsive">
                            <table class="table table-bordered table-condensed table-hover table-padding table-striped" id="tblAllegation">
                                <thead>
                                    <tr>

                                        <th>Allegation</th>
                                        <th>Count</th>
                                        <th>Note</th>
                                        <th>Finding</th>
                                        <th width="60">Del </th>
                                    </tr>
                                    <tr class="template hidden">
                                        <td>
                                            @Html.Hidden("NoteID", "0")
                                            @Html.Hidden("AllegationID", "0")
                                            @*@Html.Hidden("IsDelete", "0")*@
                                            @Html.DropDownList("AllegationTypeID", Model.AllegationTypeList, "", new { @class = "form-control input-sm", tabindex = 9, style = "width:98%" })
                                        </td>
                                        <td>
                                            @Html.TextBox("AllegationCount", "", new { @class = "form-control input-sm", tabindex = 9, style = "width:98%" })

                                        </td>
                                        <td>@Html.TextBox("AllegationNote", "", new { @class = "form-control input-sm", tabindex = 9, style = "width:98%" })</td>
                                        <td>
                                            @Html.DropDownList("AllegationFindingID", Model.AllegationFindingList, "", new { @class = "form-control input-sm", tabindex = 9, style = "width:98%" })
                                        </td>
                                        <td></td>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.AllegationList)
                                    {
                                        <tr>
                                            <td>
                                                @Html.Hidden("NoteID", item.NoteID)
                                                @Html.Hidden("AllegationID", item.AllegationID)
                                                @Html.Hidden("IsDelete", "0")
                                                @Html.DropDownList("AllegationTypeID", UtilityFunctions.CodeGetByTypeIdAndUserId(22, includeCodeId: item.AllegationTypeCodeID.HasValue ? item.AllegationTypeCodeID.Value : 0), "", new { @class = "form-control input-sm allegationTypeDll", tabindex = 9, style = "width:98%", data_val = item.AllegationTypeCodeID, data_secure_disabled_id = ((int)SecurityToken.EditAllegation) })
                                            </td>
                                            <td>
                                                @Html.TextBox("AllegationCount", item.AllegationIdentifier, new { @class = "form-control input-sm", tabindex = 9, style = "width:98%", data_secure_disabled_id = ((int)SecurityToken.EditAllegation) })

                                            </td>
                                            <td>

                                                @Html.TextBox("AllegationNote", item.NoteEntry, new { @class = "form-control input-sm", tabindex = 9, style = "width:98%", data_secure_disabled_id = ((int)SecurityToken.EditAllegation) })
                                            </td>
                                            <td>
                                                @Html.DropDownList("AllegationFindingID", UtilityFunctions.CodeGetByTypeIdAndUserId(68, includeCodeId: item.AllegationFindingCodeID.HasValue ? item.AllegationFindingCodeID.Value : 0), "", new { @class = "form-control input-sm allegationTypeDll", tabindex = 9, style = "width:98%", data_val = item.AllegationFindingCodeID, data_secure_disabled_id = ((int)SecurityToken.EditAllegation) })
                                            </td>
                                            <td>
                                                <input type="checkbox" id="IsDelete" name="IsDelete" />
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

                                        }
    @if (!isDataEntry)
    {
        @Html.Partial("_steps")
    }


    @section scripts
{
        <script>
            var dataEntryQueryString = '@(isDataEntry?"?dataentry=true":"")';
            var $caseClosedDate = '@Model.CaseClosedDate';
        </script>
        <script src="@Url.Content("~/Scripts/Application-Script/CaseOpening/PetitionAddEdit.js?v=" + Guid.NewGuid())"></script>
        <script>
            $(function () {
                setTimeout(function () {
                    $('.btnAddAllegation').click();
                }, 500);
            });
        </script>
    }


    @section fixedfooter{
        <div class="boxfloat text-center">
            @if (Model.PetitionID == 0)
            {
                <button id="saveAndContinue" type="submit" class="btn btn-primary v-bottom default" tabindex="10" data-secure-id="@((int)SecurityToken.AddPetition)">Save/Go To List</button>
                <button id="saveAndAdd" type="submit" class="btn btn-default v-bottom " tabindex="11" data-secure-id="@((int)SecurityToken.AddPetition)">Save/Return</button>
                if (isDataEntry)
                { <button id="saveAndMain" type="submit" class="btn btn-default v-bottom " tabindex="10" data-secure-id="@((int)SecurityToken.AddPetition)">Save/Main</button>


                } <button id="btnBackToList" type="submit" class="btn btn-default v-bottom    " tabindex="13">Cancel</button>

            }
            else
            {
                <button id="saveAndContinue" type="submit" class="btn btn-primary v-bottom default" tabindex="10" data-secure-id="@((int)SecurityToken.EditPetition)">Save/Go To List</button>
                <button id="saveAndAdd" type="submit" class="btn btn-default v-bottom " tabindex="11" data-secure-id="@((int)SecurityToken.EditPetition)">Save/Return</button>
                @*<button id="btnBackToList" type="submit" class="btn btn-default v-bottom    " tabindex="13">Back to List</button>*@
            if (isDataEntry)
            { <button id="saveAndMain" type="submit" class="btn btn-default v-bottom " tabindex="10" data-secure-id="@((int)SecurityToken.EditPetition)">Save/Main</button>


            }
            <button id="btnDelete" type="submit" class="btn btn-default v-bottom    " tabindex="12" data-secure-id="@((int)SecurityToken.DeletePetition)">Delete Petition</button>
            <button id="btnBackToList" type="submit" class="btn btn-default v-bottom    " tabindex="13">Cancel</button>
            }


        </div>

    }
    <select class=" hidden respondents form-control input-sm item_RoleID valid" data-val="true" data-val-number="The field RoleID must be a number." data-val-required="The RoleID field is required." id="item_RoleID" name="item.RoleID" style="width:98%" tabindex="1" aria-required="true" aria-invalid="false" aria-describedby="item_RoleID-error">
        <option value="3">Child</option>
        <option value="23095">Minor Mother</option>
        <option value="782">Mother</option>
        <option value="21476">TBD Adult</option>
        <option value="774">Father</option>
        <option value="2839">Unknown Parent</option>
        <option value="773">Defacto Parent</option>
        <option value="781">Legal Guardian</option>
        <option value="766">Caretaker</option>
    </select>