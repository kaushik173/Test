@model LALoDep.Models.Case.ConflictViewModel
@using LALoDep.Custom.Security
@using LALoDep.Core.Custom.Extensions
@{
    ViewBag.Title = "Conflict";
    var Display = string.Empty;
    if (Model.ConflictID == 0)
    {
        Display = "Add Conflict";
    }
    else
    {
        Display = "Edit Conflict";
    }
}
<style>
    .form-inline .input-group {
        display: table;
    }
</style>
<div class="row">
    <div class="col-md-12 col-sm-12 center-block" style="padding: 0 20px 0 20px">
        <div class="widget row">
            <div class="widget-header bordered-bottom bordered-themeprimary col-xs-12">
                <span class="widget-caption">@Display</span>
                <div class="widget-buttons">
                    &nbsp;
                </div>
            </div>
            <div class="widget-body col-xs-12">
                @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "confiltAddEdit-form", @class = "form-inline  center-block" }))
                {
                    @Html.HiddenFor(m => m.AgencyID)
                    @Html.HiddenFor(m => m.ConflictStatusCodeID)
                    @Html.HiddenFor(m => m.ConflictStatusDate)
                    @Html.HiddenFor(m => m.StatusByUserID)
                    @Html.HiddenFor(m => m.RecordStateID)
                    @Html.HiddenFor(m => m.ConflictID)
                    @Html.HiddenFor(m => m.NoteID)
                    @Html.HiddenFor(m => m.NoteEntityCodeID)
                    @Html.HiddenFor(m => m.NoteEntityTypeCodeID)
                    @Html.HiddenFor(m => m.NoteTypeCodeID)
                    @Html.HiddenFor(m => m.NoteSubject)
                    
                    <div class="form-group col-md-2 no-margin-left">
                        @Html.LabelFor(m => m.ConflictDate, new { @class = "control-label" })
                        <div class="input-group">

                            @Html.TextBoxFor(m => m.ConflictDate, new { @class = "form-control input-sm date-picker required", autofocus = "autofocus", tabindex = 1, maxlength = "10", style = "width:100%" })
                            <span class="input-group-addon datepicker-trigger" style="width:auto !important;">
                                <i class="fa fa-calendar"></i>
                            </span>
                            @Html.HiddenFor(m => m.ConflictDate, new { id = "hdn_ConflictDate" })
                            <div class="clearfix"></div>
                        </div>
                    </div>
                    <div class="form-group col-md-4 no-margin-right">
                        @Html.LabelFor(m => m.RoleID, new { @class = "control-label" })
                        @Html.DropDownListFor(m => m.RoleID, new SelectList(Model.RoleList, "CodeID", "CodeValue"), "", new { @class = "required form-control input-sm", tabindex = 2, style = "width:100%" })
                        @Html.Hidden("hdn_RoleID", Model.RoleID)
                    </div>
                    <div class="form-group col-md-4">
                        @Html.LabelFor(m => m.ConflictTypeCodeID, new { @class = "control-label" })
                        @Html.DropDownListFor(m => m.ConflictTypeCodeID, Model.ConfilctTypeList, "", new { @class = "required form-control input-sm ", tabindex = 3, style = "width:100%;" })
                        @Html.Hidden("hdn_ConflictTypeCodeID", Model.ConflictTypeCodeID)
                    </div>
                    <div class="form-group  col-md-12 col-sm-12  col-xs-12 ">
                        @Html.LabelFor(m => m.NoteEntry, new { @class = "control-label" })
                        @Html.TextAreaFor(m => m.NoteEntry, new { @class = "form-control "+ ((Model.ControlType == "RTF") ? " summernote" : ""), tabindex = 4, style = "width:100%" })
                        @Html.Hidden("hdn_NoteEntry" ,Model.NoteEntry)
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<div class="row" id="divSearchResult">
    <div class="col-md-12 col-sm-12 center-block" style="padding: 0 20px 0 20px">
        <div class="widget row">
            <div class="widget-header bordered-bottom bordered-themeprimary col-xs-12">
                <span class="widget-caption">Conflict List</span>
                <div class="widget-buttons">
                    &nbsp;
                </div>
            </div>
            <div class="widget-body col-xs-12">
                <div class="table-responsive">
                    <table class="table table-bordered table-condensed table-hover table-padding table-striped" id="conflictList">
                        <thead>
                            <tr>
                                <th>Conflict Date</th>
                                <th>Case Role</th>
                                <th>Conflict Type</th>
                                <th style="width:30px"></th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section fixedfooter{
    <div class="boxfloat text-center">
        @if ((!Model.ConflictID.HasValue && Model.CanAddAccess) || (Model.ConflictID.HasValue && Model.CanEditAccess))
        {
            <button id="btnSave" type="submit" class="btn btn-primary v-bottom default" data-id="@(LALoDep.Core.Custom.Utility.Utility.Encrypt(Model.ConflictID.ToString()))" tabindex="5"> @(Model.ConflictID.HasValue ? "Save" : "Add New Conflict")</button>
        }
        @if ((Model.ConflictID.HasValue && Model.CanEditAccess))
        {
            <button id="btnSaveAndAddNew" type="button" class="btn  v-bottom default" tabindex="6">Save/Add New</button>
        }
        <button id="btnBack" type="button" class="btn  v-bottom btn-default" tabindex="6">Back</button>

    </div>
}

@section scripts
{
    <script>
        var $IsDelete = '@Model.CanDeleteAccess';
        var $IsEdit = '@Model.CanEditAccess';
    </script>
    <script src="@Url.Content("~/Scripts/Application-Script/Case/Conflict.js?v=" + Guid.NewGuid())"></script>

<script>
    ApplySummernote();
</script>

}
