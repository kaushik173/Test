@using LALoDep.Core.Custom.Extensions
@model LALoDep.Models.Case.FindingsAndOrdersAddViewModel
@{
    ViewBag.Title = "Findings And Orders";
    int tabIndex = 0;
}
@Html.Action("CalendarSummaryBar", "Task", new { id = Model.HearingID })
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "FindingsAndOrders-form", @class = "form-inline  center-block" }))
{
    @Html.HiddenFor(m => m.HearingID)
    @Html.HiddenFor(m => m.AgencyID)

    @Html.HiddenFor(m => m.NoteID)
    @Html.HiddenFor(m => m.NoteSubject)
    @Html.HiddenFor(m => m.NoteEntityCodeID)
    @Html.HiddenFor(m => m.NoteEntityTypeCodeID)

    <div class="row">
        <div class="col-md-12 col-sm-12 center-block" style="padding: 0 20px 0 20px">
            <div class="widget row">
                <div class="widget-header bordered-bottom bordered-themeprimary col-xs-12">
                    <span class="widget-caption">Hearing</span>
                </div>
                <div class="widget-body col-xs-12">
                    <div class="form-group col-md-3">
                        @Html.LabelFor(m => m.HearingType, new { @class = "control-label" })
                        @Html.TextBoxFor(m => m.HearingType, new { @class = "form-control input-sm", disabled = "disabled", style = "width:100%" })
                    </div>
                    <div class="form-group col-md-3">
                        @Html.LabelFor(m => m.HearingDateTime, new { @class = "control-label" })
                        @Html.TextBoxFor(m => m.HearingDateTime, new { @class = "form-control input-sm", disabled = "disabled", style = "width:100%" })
                    </div>
                    <div class="form-group col-md-3">
                        @Html.LabelFor(m => m.HearingJudge, new { @class = "control-label" })
                        @Html.TextBoxFor(m => m.HearingJudge, new { @class = "form-control input-sm", disabled = "disabled", style = "width:100%" })
                    </div>
                    <div class="form-group col-md-3">
                        @Html.LabelFor(m => m.HearingDept, new { @class = "control-label" })
                        @Html.TextBoxFor(m => m.HearingDept, new { @class = "form-control input-sm", disabled = "disabled", style = "width:100%" })
                    </div>
                    <div class="form-group col-md-12">
                        @Html.LabelFor(m => m.NoteEntry, new { @class = "control-label" })
                        @Html.TextAreaFor(m => m.NoteEntry, new { @class = "form-control input-sm", style = "width:100%", tabindex = ++tabIndex, disabled = "disabled" })
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12 col-sm-12 center-block" style="padding: 0 20px 0 20px">
            <div class="widget row">
                <div class="widget-header bordered-bottom bordered-themeprimary col-xs-12">
                    <span class="widget-caption">Findings And Orders</span>
                </div>
                <div class="widget-body col-xs-12">
                    @for (int indx = 0; indx < 5; indx++)
                    {
                        <div id="finding-@indx" class="finding-or-order">
                            <div class="row">
                                <div class="margin-bottom-5">
                                    <div class="form-group pull-left">
                                        <label><strong>Finding Or Order:</strong></label>
                                        @Html.DropDownList("FindingsAndOrders", Model.FindingOrderTypeList, "", new { @class = "forrm-control input-sm", tabindex = ++tabIndex })
                                    </div>
                                    <div class="col-sm-6">
                                        <label><strong>Comment:</strong></label>
                                        @Html.TextBox("HearingFindingOrderComment","",new { @class = "forrm -control input-sm", style = "width:80%", tabindex = ++tabIndex, maxlength = "100" })
                                    </div>

                                </div>

                            </div>
                            <div class="row">
                                <div class="col-sm-4 no-padding">
                                    <div class="row">
                                        <div class="col-md-12">
                                            <label class="control-label">Person</label>
                                        </div>
                                    </div>
                                    @foreach (var person in Model.FindingOrderPersonList)
                                    {
                                        <div class="row @(person.IsRoleClient ? "highLightBlue" : "")">
                                            <div class="col-md-12">
                                                <label>
                                                    @Html.CheckBox("Person", person.Selected, new { @class = "finding-person", tabindex = ++tabIndex, data_roleid = person.RoleID })
                                                    <span>@person.PersonDisplayName (@person.RoleTypeCodeValue)</span>
                                                </label>
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div class="col-sm-8 no-padding">
                                    <div class="row">
                                        <div class="col-md-12">
                                            <label class="control-label">Notices</label>
                                        </div>
                                    </div>
                                    <div class="row">
                                        @foreach (var notice in Model.FindingOrderNoticeList)
                                        {
                                            <div class="col-md-6">
                                                <label>
                                                    @Html.CheckBox("Notice", notice.Selected, new { @class = "finding-notice", tabindex = ++tabIndex, data_noticeid = notice.NoticeID })
                                                    <span>@notice.Notice</span>
                                                </label>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@section fixedfooter{
    <div class="boxfloat text-center">
        <button id="btnSave" type="submit" class="btn btn-primary v-bottom default " tabindex="@(++tabIndex)">Save</button>
        <button id="btnCancel" type="button" class="btn btn-default v-bottom " tabindex="@(++tabIndex)">Cancel</button>
    </div>
}
@section scripts{
    <script type="text/javascript">

        function VaidateFindingAndOrders() {
            var isValid = true;
            var total = $(".finding-or-order").length;
            for (var indx = 0; indx < total; indx++) {
                var fo = $(".finding-or-order").eq(indx);
                var ddlfinding = fo.find("#FindingsAndOrders");
                var selectedPerson = fo.find(".finding-person:checked");

                if (ddlfinding.val() != '' && selectedPerson.length <= 0) {
                    notifyDanger("Atleast one person is required when any Finding Or Order is selected.");
                    fo.find(".finding-person:first").focus();
                    isValid = false;
                    break;
                }

                if (ddlfinding.val() == '' && selectedPerson.length > 0) {
                    notifyDanger("Finding Or Order is required when any person is selected.");
                    ddlfinding.focus();
                    isValid = false;
                    break;
                }

            }
            return isValid;
        }
        function getData() {
            var data = {
                HearingID: $("#HearingID").val(),
                NoteID: "",
                NoteSubject: "",
                NoteEntityCodeID: "",
                NoteEntityTypeCodeID: "",
                NoteEntry: "",
                FindingsAndOrders: []
            }

            if ($("#NoteEntry").IsValueChanged()) {
                data.NoteID = $("#NoteID").val();
                data.NoteSubject = $("#NoteSubject").val();
                data.NoteEntityCodeID = $("#NoteEntityCodeID").val();
                data.NoteEntityTypeCodeID = $("#NoteEntityTypeCodeID").val();
                data.NoteEntry = $("#NoteEntry").val();
            }

            $(".finding-or-order").each(function (e) {
                var ddlfinding = $(this).find("#FindingsAndOrders");
                var hearingFindingOrderComment = $(this).find("#HearingFindingOrderComment");
                var selectedPerson = $(this).find(".finding-person:checked");
                var selectedNotices = $(this).find(".finding-notice:checked");

                if (hearingFindingOrderComment.val().length > 0 || ddlfinding.val().length > 0 || selectedPerson.length > 0 || selectedNotices.length > 0) {
                    var finding = {
                        CodeHearingFindingOrderID: ddlfinding.val(),
                        HearingFindingOrderComment: hearingFindingOrderComment.val(),
                        FindingOrderPersonList: [],
                        FindingOrderNoticeList: []
                    };

                    for (var indx = 0; indx < selectedPerson.length; indx++) {
                        var chkPerson = selectedPerson.eq(indx);
                        var person = {
                            RoleID: chkPerson.data("roleid"),
                            Selected: chkPerson.is(":checked")
                        };

                        finding.FindingOrderPersonList.push(person);
                    }

                    for (var indx = 0; indx < selectedNotices.length; indx++) {
                        var chkNotice = selectedNotices.eq(indx);
                        var notice = {
                            NoticeID: chkNotice.data("noticeid"),
                            Selected: chkNotice.is(":checked")
                        };

                        finding.FindingOrderNoticeList.push(notice);
                    }
                    data.FindingsAndOrders.push(finding);
                }
            });

            return data;
        }

        function saveData() {
            if (!IsValidFormRequest()) {
                return false;
            }

            if (hasFormChanged("FindingsAndOrders-form")) {

                if (VaidateFindingAndOrders()) {
                    var data = getData();
                    $.ajax({
                        type: "POST", url: '/Case/AddFindingsAndOrders/', data: data,
                        success: function (result) {
                            if (result.isSuccess) {
                                window.location.href = "@Url.Action(MVC.Case.FindingsAndOrders(Model.HearingID.ToEncrypt()))?caseId=@Model.CaseID.ToEncrypt()";
                            }
                        }
                    });
                }
            }
            else {
                notifyDanger("Nothing has been changed.");
            }
        }

        $("#btnSave").on("click", function () {
            saveData();
        });

        $("#btnCancel").on("click", function () {
            var source = getParameterByName("main");
            if (source != null && source.toLowerCase() == 'true') {
                window.location.href = "/Case/Main";
            }
            else {
                window.location.href = "@Url.Action(MVC.Case.FindingsAndOrders(Model.HearingID.ToEncrypt()))?caseId=@Model.CaseID.ToEncrypt()";
            }
        });

        $(document).ready(function () {
            setInitialFormValues("FindingsAndOrders-form");
        });
    </script>
}