@model LALoDep.Areas.Mobile.Models.RecordTimeAddViewModel
@{
    ViewBag.Title = "Record Time Add";
    Layout = "~/Areas/Mobile/Views/Shared/_Layout.cshtml";
    int tabIndex = 0;
}
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "RecordTimeAdd-form", @class = "form-inline center-block" }))
{
    <div class="row">
        <div class="col-xs-12 center-block">
            <div class="widget row">
                <div class="widget-header bordered-bottom bordered-themeprimary col-xs-12 mobile-title">
                    <span class="widget-caption">
                        <a href="@Url.Action("CaseInfo", "Case", new { id = ViewBag.CaseID })">@ViewBag.CaseNumber</a> - @ViewBag.ClinetName
                    </span>
                    <div class="widget-buttons">&nbsp;</div>
                </div>
                <div class="widget-body col-xs-12">

                    <div class="form-group">
                        @Html.LabelFor(m => m.WorkHours, "Hours", new { @class = "control-label" })
                        @Html.TextBoxFor(m => m.WorkHours, new { @class = "form-control input-sm numeric-val", @type = "number", autofocus = "autofocus", tabindex = ++tabIndex })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.WorkDescriptionCodeID, "Description", new { @class = "control-label" })
                        @Html.DropDownListFor(m => m.WorkDescriptionCodeID, Model.WorkDescriptionList, "", new { @class = "form-control input-sm", tabindex = ++tabIndex })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.WorkPhaseCodeID, "Phase", new { @class = "control-label" })
                        @Html.DropDownListFor(m => m.WorkPhaseCodeID, Model.WorkPhaseList, "", new { @class = "form-control input-sm", tabindex = ++tabIndex })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.WorkMileage, "Mileage", new { @class = "control-label" })
                        @Html.TextBoxFor(m => m.WorkMileage, new { @class = "form-control input-sm numeric-val", @type = "number", tabindex = ++tabIndex })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.WorkStartDate, "Date", new { @class = "control-label" })
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.WorkStartDate, "{0:MM/dd/yyyy}", new { @class = "form-control input-sm date-picker", tabindex = ++tabIndex })
                            <span class="input-group-addon datepicker-trigger">
                                <i class="fa fa-calendar"></i>
                            </span>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.NoteEntry, "Note", new { @class = "control-label" })
                        @Html.TextAreaFor(m => m.NoteEntry, new { @class = "form-control input-sm", tabindex = ++tabIndex })
                    </div>

                    <div class="table-responsive">
                        <table class="table table-bordered table-condensed table-hover table-padding table-striped" id="tblWorkedFor">
                            <thead>
                                <tr>
                                    <th style="width:10px;"><input type="checkbox" name="selectAll" value="" id="selectAll" tabindex="@(++tabIndex)"/></th>
                                    <th colspan="2">Worked For</th>                                    
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.WorkedForList != null && Model.WorkedForList.Count > 0)
                                {
                                    foreach (var role in Model.WorkedForList)
                                    {
                                        <tr data-allmainpetitionsclosedflag="@role.AllMainPetitionsClosedFlag"
                                            data-roleid="@role.RoleID">
                                            <td><input type="checkbox" class="chk-work-for" name="role-@role.RoleID" value="@role.WorkRoleID" id="role-@role.RoleID" @(role.Selected == 1 ? "checked=\"checked\"" : string.Empty)  tabindex="@(++tabIndex)" /></td>
                                            <td>@role.PersonNameLast,  @role.PersonNameFirst</td>
                                            <td>@role.AllMainPetitionsDisplay</td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr><td colspan="3" class="text-align-center">No data available in table</td></tr>
                                }
                            </tbody>
                        </table>
                    </div>

                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12 center-block">
            <div class="widget row">                
                <div class="widget-body col-xs-12">
                    <div class="form-group">
                        @Html.LabelFor(m => m.NextCaseID, "Next Case", new { @class = "control-label" })
                        @Html.DropDownListFor(m => m.NextCaseID, Model.NextCaseList, "", new { @class = "form-control input-sm", tabindex = ++tabIndex })
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@section fixedfooter{
    <div class="boxfloat text-center">
        <button id="btnSave" type="submit" class="btn btn-sm btn-primary default">Save</button>
        <button id="btnCancel" type="submit" class="btn btn-sm btn-default default">Cancel</button>
    </div>
}

@section scripts{
    <script type="text/javascript">
        function GetData() {
            var data = {
                "WorkHours": $('#WorkHours').val(),
                "WorkDescriptionCodeID": $('#WorkDescriptionCodeID').val(),
                "WorkPhaseCodeID": $('#WorkPhaseCodeID').val(),
                "WorkMileage": $('#WorkMileage').val(),
                "WorkStartDate": $('#WorkStartDate').val(),
                "NoteEntry": $('#NoteEntry').val(),
                "NextCaseID": $('#NextCaseID').val(),                
                "WorkedForList": []
            };

            var workForTr = $("#tblWorkedFor tbody tr");
            for (var indx = 0; indx < workForTr.length; indx++) {
                $tr = workForTr.eq(indx);
                $personchk = $tr.find(".chk-work-for");
                if ($personchk.is(":checked")) {
                    var workList = {
                        "RoleID": $tr.data("roleid")
                    };

                    data.WorkedForList.push(workList);
                }
            }
            return data;
        }


        function ajaxRequestForSave(data) {
            var ajaxUrl = '@Url.Action("RecordTimeAdd", "Case")';            
            $.ajax({
                type: "POST", dataType: 'json', url: ajaxUrl, data: data, contentType: "application/json",
                success: function (result) {
                    RequestSubmitted();
                    if (result.isSuccess) {
                        if (result.URL != undefined && result.URL != '') {
                            window.location.href = result.URL;
                        }
                    }
                    else {
                        notifyDanger('There is something wrong while processing request.');
                    }
                }
            });
        }

        function SaveData() {
            IPadKeyboardFix();
            if (!IsValidFormRequest()) {
                return;
            }

            if (!hasFormChanged('RecordTimeAdd-form')) {
                notifyDanger('Nothing has been changed.');
                return false;
            }

            if ($("#WorkHours").val() == "") {
                notifyDanger('Hours is required.');
                $("#WorkHours").focus();
                return false;
            }
            if ($("#WorkDescriptionCodeID").val() == "") {
                notifyDanger('Description is required.');
                $("#WorkDescriptionCodeID").focus();
                return false;
            }
            if ($("#WorkPhaseCodeID").val() == "") {
                notifyDanger('Phase is required.');
                $("#WorkPhaseCodeID").focus();
                return false;
            }
            if ($("#WorkStartDate").val() == "") {
                notifyDanger('Start date is required.');
                $("#WorkStartDate").focus();
                return false;
            }

            if ($("#tblWorkedFor .chk-work-for:checked").length <= 0) {
                notifyDanger('At least one Worked For Person is required.');
                return false;
            }
            var data = JSON.stringify(GetData());
            ajaxRequestForSave(data);
        }

        $("#selectAll").on("click", function () {
            var checked = $(this).is(":checked");
            $("#tblWorkedFor .chk-work-for").each(function (i, e) {
                $(this).prop("checked", checked);
            });
        });

        $("#tblWorkedFor").on("click", ".chk-work-for", function () {
            var allSelected = $("#tblWorkedFor .chk-work-for").length == $("#tblWorkedFor .chk-work-for:checked").length;
            $("#selectAll").prop("checked", allSelected);
        });

        $("#btnSave").on("click", function () {
            SaveData();
        });

        $("#btnCancel").on("click", function () {
            window.location.href = "@Request.UrlReferrer.PathAndQuery";
        });

        $(document).ready(function () {
            setInitialFormValues('RecordTimeAdd-form');
        });
    </script>
}